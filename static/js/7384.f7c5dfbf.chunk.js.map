{"version":3,"file":"static/js/7384.f7c5dfbf.chunk.js","mappings":"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","sources":["redux/manufacture/manufactureApi.js","components/manufacturers/AddManufacturerForm.jsx","views/manufacturer/add-manufacturer/AddManufacturer.jsx"],"sourcesContent":["import { apiSlice } from \"../api/apiSlice\";\n\nexport const manufactureApi = apiSlice.injectEndpoints({\n  tagTypes: [\"Manufacture\", \"SingleManufacture\"],\n  endpoints: (builder) => ({\n    // get all manufacturer\n    getAllManufacture: builder.query({\n      query: () => ({\n        url: `/manufacturer`,\n        method: \"GET\",\n      }),\n      providesTags: [\"Manufacture\"],\n    }),\n\n    // get single manufacturer by id\n    getSingleManufacture: builder.query({\n      query: (id) => ({\n        url: `/manufacturer/${id}`,\n        method: \"GET\",\n      }),\n      invalidatesTags: [\"Manufacture\"],\n      providesTags: [\"SingleManufacture\"],\n    }),\n\n    // add new manufacturer\n    addManufacture: builder.mutation({\n      query: (data) => ({\n        url: `/manufacturer`,\n        method: \"POST\",\n        body: data,\n\n      }),\n      invalidatesTags: [\"Manufacture\"],\n    }),\n\n    // update manufacturer by id\n    updateManufacture: builder.mutation({\n      query: ({ id, data }) => ({\n        url: `/manufacturer/${id}`,\n        method: \"PUT\",\n        body: data,\n\n      }),\n      invalidatesTags: [\"Manufacture\", \"SingleManufacture\"],\n    }),\n\n    // delete manufacturer by id\n    deleteBrand: builder.mutation({\n      query: (id) => ({\n        url: `/manufacturer/${id}`,\n        method: \"DELETE\",\n        body: id,\n\n      }),\n      invalidatesTags: [\"Manufacture\"],\n    }),\n  }),\n});\n\nexport const {\n  useGetAllManufactureQuery,\n  useDeleteBrandMutation,\n  useAddManufactureMutation,\n  useUpdateManufactureMutation,\n  useGetSingleManufactureQuery,\n} = manufactureApi;\n","import { cilPlus } from \"@coreui/icons\";\nimport CIcon from \"@coreui/icons-react\";\nimport { CButton, CCol, CForm, CFormInput, CFormTextarea, CRow } from \"@coreui/react\";\nimport PropTypes from \"prop-types\";\nimport { Image } from \"react-bootstrap\";\nimport { useForm } from \"react-hook-form\";\nimport CancelButton from \"src/ui/button/CancelButton\";\n\nconst AddManufacturerForm = (props) => {\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: { errors },\n    control,\n  } = useForm();\n\n  return (\n    <CForm onSubmit={handleSubmit(props.onSubmit)}>\n      <CRow className=\"g-3\">\n        <CCol xs={12}>\n          <CFormInput\n            type=\"text\"\n            id=\"manufacturerNameInputField\"\n            label=\"Name\"\n            placeholder=\"Enter Manufacturer Name\"\n            defaultValue={props?.data?.name}\n            aria-describedby=\"manufacturerNameInputField\"\n            {...register(\"name\", { required: props?.data ? false : true })}\n          />\n        </CCol>\n        <CCol xs={12}>\n          <CFormTextarea\n            id=\"manufacturerDescriptionTextareaField\"\n            label=\"Description\"\n            placeholder=\"Enter Description\"\n            defaultValue={props?.data?.description}\n            aria-describedby=\"manufacturerDescriptionTextareaField\"\n            rows=\"3\"\n            text=\"Manufacturer description must be within 1000 words.\"\n            {...register(\"description\", { required: props?.data ? false : true })}\n          ></CFormTextarea>\n        </CCol>\n        <CCol xs={12}>\n          <CFormInput\n            type=\"file\"\n            id=\"manufacturerImageInputField\"\n            label=\"Image\"\n            {...register(\"image\")}\n          />\n        </CCol>\n        {props?.data?.image && (\n          <Image fluid className=\"my-2\" style={{ height: '8rem', width:'fit-content' }} src={props?.data?.image} />\n        )}\n      </CRow>\n      <div className=\"text-end\">\n        <CancelButton />\n        <CButton type=\"submit\" color=\"primary\" className=\"mt-3\">\n          <CIcon icon={cilPlus} className=\"me-2\" />\n          {props?.isLoading ? \"Loading..\" : \"Save\"}\n        </CButton>\n      </div>\n    </CForm>\n  );\n};\n\nexport default AddManufacturerForm;\n\nAddManufacturerForm.propTypes = {\n  data: PropTypes.shape({\n    name: PropTypes.string,\n    description: PropTypes.string,\n  }),\n  onSubmit: PropTypes.func,\n};\n","import { CCard, CCardBody, CCardHeader, CCol, CRow } from \"@coreui/react\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport AddManufacturerForm from \"src/components/manufacturers/AddManufacturerForm\";\nimport {\n  useAddManufactureMutation,\n  useGetSingleManufactureQuery,\n  useUpdateManufactureMutation,\n} from \"src/redux/manufacture/manufactureApi\";\n\nconst AddManufacturer = () => {\n  const { id } = useParams();\n  const [haveId, setHaveId] = useState(true);\n  const { data } = useGetSingleManufactureQuery(id, { skip: haveId });\n  const [\n    updateManufacture,\n    { isLoading: updateLoading, isSuccess: updateSuccess, isError: updateError },\n  ] = useUpdateManufactureMutation();\n  const [addManufacturer, { isLoading: addLoading, isSuccess: addSuccess, isError: addError }] =\n    useAddManufactureMutation();\n\n  useEffect(() => {\n    if (id) {\n      setHaveId(false);\n    }\n  }, [id]);\n\n  const handleCreateManufacturer = (data) => {\n    const image = data.image[0];\n    const formData = new FormData();\n    formData.append(\"image\", image);\n\n    if (data.name) formData.append(\"name\", data.name);\n    if (data.description) formData.append(\"description\", data.description);\n\n    if (id) {\n      updateManufacture({ id, data: formData });\n    } else {\n      addManufacturer(formData);\n    }\n  \n  };\n\n  const navigate = useNavigate();\n  useEffect(() => {\n    addSuccess && navigate(-1);\n    updateSuccess && navigate(-1);\n  }, [updateSuccess, addSuccess]);\n\n  useEffect(() => {\n    toast.dismiss();\n    if (addError) {\n      toast.error(\"Manufacturer added failed\");\n    }\n    if (updateError) {\n      toast.error(\"Manufacturer updated\");\n    }\n  }, [addError, updateError]);\n\n  return (\n    <>\n      <CRow>\n        <CCol xs={12}>\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>{id ? \"Edit\" : \"Add\"} Brand</strong>\n            </CCardHeader>\n            <CCardBody>\n              <AddManufacturerForm\n                isLoading={updateLoading || addLoading}\n                data={data?.result[0]}\n                onSubmit={handleCreateManufacturer}\n              />\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n    </>\n  );\n};\n\nexport default AddManufacturer;\n"],"names":["manufactureApi","apiSlice","injectEndpoints","tagTypes","endpoints","builder","getAllManufacture","query","url","method","providesTags","getSingleManufacture","id","concat","invalidatesTags","addManufacture","mutation","data","body","updateManufacture","_ref","deleteBrand","useGetAllManufactureQuery","useDeleteBrandMutation","useAddManufactureMutation","useUpdateManufactureMutation","useGetSingleManufactureQuery","props","_props$data","_props$data2","_props$data3","_props$data4","register","handleSubmit","watch","formState","errors","control","useForm","_jsxs","CForm","onSubmit","children","CRow","className","_jsx","CCol","xs","CFormInput","type","label","placeholder","defaultValue","name","required","CFormTextarea","description","rows","text","image","Image","fluid","style","height","width","src","CancelButton","CButton","color","CIcon","icon","cilPlus","isLoading","AddManufacturer","useParams","haveId","setHaveId","useState","skip","updateLoading","isSuccess","updateSuccess","isError","updateError","addManufacturer","addLoading","addSuccess","addError","useEffect","navigate","useNavigate","toast","dismiss","error","_Fragment","CCard","CCardHeader","CCardBody","AddManufacturerForm","result","formData","FormData","append"],"sourceRoot":""}