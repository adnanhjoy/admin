{"version":3,"file":"static/js/7447.7aa900d7.chunk.js","mappings":"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","sources":["redux/storeLocation/storeLocationApi.js","views/storeLocation/StoreTableRowData.jsx","views/storeLocation/ManageStoreLocation.jsx"],"sourcesContent":["/* eslint-disable prettier/prettier */\nimport { apiSlice } from \"../api/apiSlice\";\n\nexport const storeLocationApi = apiSlice.injectEndpoints({\n  tagTypes: [\"AllStoreLocation\", \"singleStore\"],\n  endpoints: (builder) => ({\n    // get termsCondition offer discount for new user\n    getAllStoreLocation: builder.query({\n      query: () => ({\n        url: `/storeLocation`,\n        method: \"GET\",\n      }),\n      providesTags: [\"AllStoreLocation\"],\n    }),\n    // get blog offer discount for new user\n    getSingleStore: builder.query({\n      query: (id) => ({\n        url: `/storeLocation/${id}`,\n        method: \"GET\",\n      }),\n      providesTags: [\"singleStore\"],\n    }),\n    // get blog offer discount for new user\n    addNewStore: builder.mutation({\n      query: (blog) => ({\n        url: `/storeLocation`,\n        method: \"POST\",\n        body: blog,\n      }),\n      invalidatesTags: [\"AllStoreLocation\"],\n    }),\n\n    // get blog offer discount for new user\n    updateSingleStore: builder.mutation({\n      query: ({ id, data }) => ({\n        url: `/storeLocation/${id}`,\n        method: \"PUT\",\n        body: data,\n      }),\n      invalidatesTags: [\"AllStoreLocation\", \"singleStore\"],\n    }),\n\n    // get blog offer discount for new user\n    deleteSingleStore: builder.mutation({\n      query: (id) => ({\n        url: `/storeLocation/${id}`,\n        method: \"DELETE\",\n      }),\n      invalidatesTags: [\"AllStoreLocation\"],\n    }),\n  }),\n});\n\nexport const {\n  useGetAllStoreLocationQuery,\n  useGetSingleStoreQuery,\n  useAddNewStoreMutation,\n  useUpdateSingleStoreMutation,\n  useDeleteSingleStoreMutation,\n} = storeLocationApi;\n","/* eslint-disable react/prop-types */\n/* eslint-disable prettier/prettier */\n\nimport { CTableDataCell, CTableHeaderCell, CTableRow } from \"@coreui/react\";\nimport { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport { useDeleteSingleStoreMutation } from \"src/redux/storeLocation/storeLocationApi\";\nimport DeleteButton from \"src/ui/button/DeleteButton\";\nimport EditButton from \"src/ui/button/EditButton\";\nimport DeleteModal from \"src/ui/DeleteModal\";\n\nconst StoreTableRowData = ({ index, blog }) => {\n  const [showModal, setShowModal] = useState(false);\n  const [\n    deleteSingleStore,\n    { isLoading: deleteLoading, isError: deleteError, error: errorMsg, isSuccess },\n  ] = useDeleteSingleStoreMutation();\n\n  // delete blog\n  const handleDeleteBlog = () => {\n    deleteSingleStore(blog?._id);\n  };\n\n  useEffect(() => {\n    toast.dismiss();\n    isSuccess && toast.success(\"Delete successfully\", { id: \"dSuccess\" });\n    deleteError && toast.error(\"Delete failed\", { id: \"dFailed\" });\n  }, [isSuccess, deleteError]);\n\n  return (\n    <CTableRow>\n      <CTableHeaderCell scope=\"row\">{index + 1}</CTableHeaderCell>\n      <CTableHeaderCell scope=\"row\">\n        <p>{new Date(blog?.createdAt).toDateString()}</p>\n      </CTableHeaderCell>\n      <CTableDataCell>\n        {<div dangerouslySetInnerHTML={{ __html: blog?.description }} />}\n      </CTableDataCell>\n      <CTableDataCell>\n        <div className=\"\">\n          <Link to={`/pages/store-location/edit/${blog?._id}`}>\n            <EditButton />\n          </Link>\n          <DeleteButton setShowModal={setShowModal} />\n        </div>\n      </CTableDataCell>\n      <DeleteModal\n        deleteThis={handleDeleteBlog}\n        showModal={showModal}\n        setShowModal={setShowModal}\n        id={blog._id}\n        deleteLoading={deleteLoading}\n      />\n    </CTableRow>\n  );\n};\n\nexport default StoreTableRowData;\n","/* eslint-disable prettier/prettier */\nimport {\n  CCard,\n  CCardBody,\n  CTable,\n  CTableBody,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n} from \"@coreui/react\";\nimport { useGetAllStoreLocationQuery } from \"src/redux/storeLocation/storeLocationApi\";\nimport CardHeaderButton from \"src/ui/CardHeaderButton\";\nimport StoreTableRowData from \"./StoreTableRowData\";\n\nconst ManageStoreLocation = () => {\n  const { data, isLoading, isError } = useGetAllStoreLocationQuery();\n\n  let content = null;\n  if (isLoading) {\n    content = <p>Loading..</p>;\n  }\n  if (!isLoading && isError) {\n    content = <p>There is something wrong!</p>;\n  }\n  if (!isLoading && !isError && data?.data?.length === 0) {\n    content = <p>There is no Store Location</p>;\n  }\n  if (!isLoading && !isError && data?.data?.length > 0) {\n    content = data?.data.map((store, index) => (\n      <StoreTableRowData key={store?._id} blog={store} index={index} />\n    ));\n  }\n\n  return (\n    <CCard>\n      <CardHeaderButton title={\"All Store Location\"} to=\"/pages/store-location/add\" />\n      <CCardBody>\n        <CTable align=\"middle\" className=\"mb-0 border\" bordered hover responsive>\n          <CTableHead color=\"light\">\n            <CTableRow className=\"text-start\">\n              <CTableHeaderCell scope=\"col\" style={{ width: \"3.75rem\" }}>\n                Sl. No.\n              </CTableHeaderCell>\n              <CTableHeaderCell scope=\"col\" style={{ width: \"10rem\" }}>\n                Added Dated\n              </CTableHeaderCell>\n              <CTableHeaderCell scope=\"col\">Description</CTableHeaderCell>\n              <CTableHeaderCell\n                scope=\"col\"\n                style={{\n                  width: \"100px\",\n                  minWidth: \"100px\",\n                }}\n              >\n                Actions\n              </CTableHeaderCell>\n            </CTableRow>\n          </CTableHead>\n          <CTableBody>{content}</CTableBody>\n        </CTable>\n      </CCardBody>\n    </CCard>\n  );\n};\n\nexport default ManageStoreLocation;\n"],"names":["storeLocationApi","apiSlice","injectEndpoints","tagTypes","endpoints","builder","getAllStoreLocation","query","url","method","providesTags","getSingleStore","id","concat","addNewStore","mutation","blog","body","invalidatesTags","updateSingleStore","_ref","data","deleteSingleStore","useGetAllStoreLocationQuery","useGetSingleStoreQuery","useAddNewStoreMutation","useUpdateSingleStoreMutation","useDeleteSingleStoreMutation","index","showModal","setShowModal","useState","isLoading","deleteLoading","isError","deleteError","error","errorMsg","isSuccess","useEffect","toast","dismiss","success","_jsxs","CTableRow","children","_jsx","CTableHeaderCell","scope","Date","createdAt","toDateString","CTableDataCell","dangerouslySetInnerHTML","__html","description","className","Link","to","_id","EditButton","DeleteButton","DeleteModal","deleteThis","handleDeleteBlog","ManageStoreLocation","_data$data","_data$data2","content","length","map","store","StoreTableRowData","CCard","CardHeaderButton","title","CCardBody","CTable","align","bordered","hover","responsive","CTableHead","color","style","width","minWidth","CTableBody"],"sourceRoot":""}