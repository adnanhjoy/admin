{"version":3,"file":"static/js/9835.73f97543.chunk.js","mappings":"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","sources":["components/customers/AddCustomerForm.jsx","views/customers/add-customer/AddCustomer.jsx"],"sourcesContent":["import { cilPlus } from \"@coreui/icons\";\nimport CIcon from \"@coreui/icons-react\";\nimport { CButton, CCol, CForm, CFormInput, CFormSelect, CFormTextarea, CRow } from \"@coreui/react\";\nimport PropTypes from \"prop-types\";\nimport { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport CancelButton from \"src/ui/button/CancelButton\";\n\nconst AddCustomerForm = ({ data, onSubmit, customersGroup, isLoading }) => {\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    formState: { errors },\n  } = useForm();\n\n  useEffect(() => {\n    if (data) {\n      for (const key in data) {\n        setValue(key, data[key]);\n      }\n    }\n  }, [data, setValue]);\n\n  const customerGroupOptions = customersGroup?.map((c) => {\n    return { value: c.groupName, label: c.groupName };\n  });\n\n  return (\n    <CForm onSubmit={handleSubmit(onSubmit)}>\n      <CRow className=\"g-3\">\n        <CCol xs={12}>\n          <CFormInput\n            type=\"text\"\n            id=\"manufacturerNameInputField\"\n            label=\"Name\"\n            placeholder=\"Enter Manufacturer Name\"\n            // defaultValue={data?.name}\n            aria-describedby=\"manufacturerNameInputField\"\n            {...register(\"name\", { required: true })}\n          />\n        </CCol>\n        <CCol xs={12}>\n          <span className=\"rounded  bg-primary text-white px-2\">{data && data.groupName}</span>\n          <CFormSelect\n            style={{ width: \"150px\" }}\n            aria-label=\"Product Select Selection Field\"\n            options={customerGroupOptions}\n            {...register(\"group\", { required: true })}\n          />\n        </CCol>\n      </CRow>\n      <div className=\"text-end\">\n        <CancelButton />\n        <CButton disabled={isLoading} type=\"submit\" color=\"primary\" className=\"mt-3\">\n          <CIcon icon={cilPlus} className=\"me-2\" />\n          {isLoading ? \"Loading..\" : \"Update\"}\n        </CButton>\n      </div>\n    </CForm>\n  );\n};\n\nexport default AddCustomerForm;\n\nAddCustomerForm.propTypes = {\n  data: PropTypes.object,\n  onSubmit: PropTypes.func,\n};\n","import { CCard, CCardBody, CCardHeader, CCol, CRow } from \"@coreui/react\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport AddCustomerForm from \"src/components/customers/AddCustomerForm\";\nimport { useGetAllCustomerGroupQuery } from \"src/redux/customerGroup/customerGroupApi\";\nimport { useAssignUserGroupMutation, useGetSingleUserQuery } from \"src/redux/users/usersApi\";\n\nconst AddCustomer = () => {\n  const { id } = useParams();\n  const { data: customersGroup } = useGetAllCustomerGroupQuery();\n  const [assignUserGroup, { isLoading, isError, isSuccess }] = useAssignUserGroupMutation();\n  const { data: customerData, isLoading: userLoad, isError: userError } = useGetSingleUserQuery(id);\n  const [selectedStatus, setSelectedStatus] = useState(\"\");\n\n  const handleUpdateCustomer = (data) => {\n    const modifiedData = {\n      email: data.email,\n      groupName: data.group,\n    };\n\n    // assignUserGroup\n    assignUserGroup(modifiedData);\n  };\n  useEffect(() => {\n    isSuccess && toast.success(\"User group updated\", { id: \"uSuccess\" });\n    isError && toast.error(\"User group updated failed\", { id: \"fError\" });\n  }, [isSuccess, isError]);\n  return (\n    <>\n      <CRow>\n        <CCol xs={12}>\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>{id ? \"Edit\" : \"Add\"} Customer</strong>\n            </CCardHeader>\n            <CCardBody>\n              <AddCustomerForm\n                data={customerData?.result}\n                customersGroup={customersGroup}\n                onSubmit={handleUpdateCustomer}\n                isLoading={isLoading}\n              />\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n    </>\n  );\n};\n\nexport default AddCustomer;\n"],"names":["_ref","data","onSubmit","customersGroup","isLoading","register","handleSubmit","setValue","formState","errors","useForm","useEffect","key","customerGroupOptions","map","c","value","groupName","label","_jsxs","CForm","children","CRow","className","_jsx","CCol","xs","CFormInput","type","id","placeholder","required","CFormSelect","style","width","options","CancelButton","CButton","disabled","color","CIcon","icon","cilPlus","AddCustomer","useParams","useGetAllCustomerGroupQuery","assignUserGroup","isError","isSuccess","useAssignUserGroupMutation","customerData","userLoad","userError","useGetSingleUserQuery","selectedStatus","setSelectedStatus","useState","toast","success","error","_Fragment","CCard","CCardHeader","CCardBody","AddCustomerForm","result","modifiedData","email","group"],"sourceRoot":""}