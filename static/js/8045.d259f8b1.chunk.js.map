{"version":3,"file":"static/js/8045.d259f8b1.chunk.js","mappings":"sLAGO,MAAMA,E,SAAWC,SAASC,gBAAgB,CAC/CC,SAAU,CAAC,WAAY,cAAe,cACtCC,UAAYC,IAAO,CAEjBC,aAAcD,EAAQE,MAAM,CAC1BA,MAAOA,KAAA,CACLC,IAAI,kBACJC,OAAQ,QAEVC,aAAc,CAAC,cAIjBC,eAAgBN,EAAQE,MAAM,CAC5BA,MAAQK,IAAE,CACRJ,IAAI,UAADK,OAAYD,GACfH,OAAQ,QAEVC,aAAc,CAAC,iBAIjBI,eAAgBT,EAAQU,SAAS,CAC/BR,MAAQS,IAAI,CACVR,IAAI,kBACJC,OAAQ,OACRQ,KAAMD,IAERE,gBAAiB,CAAC,iBAIpBC,oBAAqBd,EAAQU,SAAS,CACpCR,MAAOa,IAAA,IAAC,MAAEC,EAAK,KAAEL,GAAMI,EAAA,MAAM,CAC3BZ,IAAI,8BAADK,OAAgCQ,GACnCZ,OAAQ,MACRQ,KAAMD,EACP,EACDE,gBAAiB,CAAC,iBAIpBI,YAAajB,EAAQU,SAAS,CAC5BR,MAAQK,IAAE,CACRJ,IAAI,sBAADK,OAAwBD,GAC3BH,OAAQ,WAEVS,gBAAiB,CAAC,cAIpBK,cAAelB,EAAQE,MAAM,CAC3BA,MAAOA,KAAA,CACLC,IAAI,qBACJC,OAAQ,QAEVC,aAAc,CAAC,gBAIjBc,WAAYnB,EAAQU,SAAS,CAC3BR,MAAQS,IAAI,CACVR,IAAI,gBACJC,OAAQ,OACRQ,KAAMD,IAERE,gBAAiB,CAAC,gBAIpBO,cAAepB,EAAQU,SAAS,CAC9BR,MAAOmB,IAAA,IAAC,GAAEd,EAAE,KAAEI,GAAMU,EAAA,MAAM,CACxBlB,IAAI,kCAADK,OAAoCD,GACvCH,OAAQ,MACRQ,KAAMD,EACP,EACDE,gBAAiB,CAAC,aAAc,iBAIlCS,cAAetB,EAAQU,SAAS,CAC9BR,MAAOqB,IAAA,IAAC,GAAEhB,EAAE,iBAAEiB,GAAkBD,EAAA,MAAM,CACpCpB,IAAI,kBAADK,OAAoBD,GACvBH,OAAQ,SACRQ,KAAM,CAAEY,oBACT,EACDX,gBAAiB,CAAC,qBAKX,qBACXY,EAAoB,uBACpBC,EAAsB,0BACtBC,EAAyB,uBACzBC,EAAsB,sBACtBC,EAAqB,sBACrBC,EAAqB,yBACrBC,EAAwB,yBACxBC,EAAwB,+BACxBC,GACEtC,C,6DCtGJ,MAQA,EARcoB,IAAmB,IAAlB,SAAEmB,GAAUnB,EACzB,OACEoB,EAAAA,EAAAA,KAACC,EAAAA,GAAc,CAACC,QAAS,OAAQC,UAAU,+BAA8BJ,SACtEA,GACc,C,0KCKrB,MAuDA,EAvDsBnB,IAAuB,IAAtB,MAAEwB,EAAK,MAAEC,GAAOzB,EACrC,MAAO0B,EAAWC,IAAgBC,EAAAA,EAAAA,WAAS,IAEzC1B,GACE2B,UAAWC,EAAeC,QAASC,EAAaC,UAAWC,KAC3DrB,EAAAA,EAAAA,MAOJ,OALAsB,EAAAA,EAAAA,YAAU,KACRC,EAAAA,GAAMC,UACNL,GAAeI,EAAAA,GAAME,MAAM,sBAAuB,CAAE9C,GAAI,WACxD0C,GAAiBE,EAAAA,GAAMG,QAAQ,uBAAwB,CAAE/C,GAAI,YAAa,GACzE,CAACwC,EAAaE,KAEfM,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAtB,SAAA,EACEqB,EAAAA,EAAAA,MAACE,EAAAA,GAAS,CAAAvB,SAAA,EACRC,EAAAA,EAAAA,KAACuB,EAAAA,GAAgB,CAACC,MAAM,MAAKzB,SAAEM,EAAQ,KACvCL,EAAAA,EAAAA,KAACC,EAAAA,GAAc,CAAAF,SAAO,OAALK,QAAK,IAALA,OAAK,EAALA,EAAOqB,QACxBzB,EAAAA,EAAAA,KAACC,EAAAA,GAAc,CAAAF,SAAO,OAALK,QAAK,IAALA,OAAK,EAALA,EAAOvB,SACxBmB,EAAAA,EAAAA,KAACC,EAAAA,GAAc,CAAAF,UACbC,EAAAA,EAAAA,KAAA,QAAMG,UAAU,yBAAwBJ,SAAO,OAALK,QAAK,IAALA,OAAK,EAALA,EAAOsB,UAEnD1B,EAAAA,EAAAA,KAACC,EAAAA,GAAc,CAAAF,UACbqB,EAAAA,EAAAA,MAAA,OAAKjB,UAAU,GAAEJ,SAAA,EACfC,EAAAA,EAAAA,KAAC2B,EAAAA,GAAI,CAACC,GAAE,eAAAvD,OAAsB,OAAL+B,QAAK,IAALA,OAAK,EAALA,EAAOyB,IAAG,oBAAmB9B,UACpDC,EAAAA,EAAAA,KAAC8B,EAAAA,GAAO,CACNC,MAAM,UACNC,QAAQ,UACRC,MAAO,CAAEC,OAAQ,OAAQC,MAAO,OAAQC,SAAU,YAAarC,UAE/DC,EAAAA,EAAAA,KAACqC,EAAAA,EAAK,CAACC,KAAMC,EAAAA,EAAWN,MAAO,CAAEG,SAAU,WAAYI,IAAK,MAAOC,KAAM,cAG7EzC,EAAAA,EAAAA,KAAC8B,EAAAA,GAAO,CACNC,MAAM,SACNC,QAAQ,UACRC,MAAO,CAAEC,OAAQ,OAAQC,MAAO,OAAQC,SAAU,YAClDjC,UAAU,OACVuC,QAASA,IAAMnC,GAAa,GAAMR,UAElCC,EAAAA,EAAAA,KAACqC,EAAAA,EAAK,CAACC,KAAMK,EAAAA,EAAUV,MAAO,CAAEG,SAAU,WAAYI,IAAK,MAAOC,KAAM,oBAKhFzC,EAAAA,EAAAA,KAAC4C,EAAAA,EAAW,CACVC,WAAY/D,EACZwB,UAAWA,EACXC,aAAcA,EACdnC,GAAS,OAALgC,QAAK,IAALA,OAAK,EAALA,EAAOyB,IACXnB,cAAeA,MAEhB,E,+CClDP,MAyDA,EAzD2B9B,IAAyB,IAAxB,QAAEkE,EAAO,MAAEzC,GAAOzB,EAC5C,MAAO0B,EAAWC,IAAgBC,EAAAA,EAAAA,WAAS,IACpCrB,GAAe,UAAEsB,EAAS,QAAEE,EAAO,UAAEE,KAAejB,EAAAA,EAAAA,OACrD,MAAEf,IAAUkE,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,QAAS,CAAC,GAEzDlC,EAAAA,EAAAA,YAAU,KACRF,GAAaG,EAAAA,GAAMG,QAAQ,mBAC3BR,GAAWK,EAAAA,GAAME,MAAM,iBAAiB,GACvC,CAACL,EAAWF,IAMf,OACES,EAAAA,EAAAA,MAACE,EAAAA,GAAS,CAAAvB,SAAA,EACRC,EAAAA,EAAAA,KAACuB,EAAAA,GAAgB,CAACC,MAAM,MAAKzB,SAAEM,EAAQ,KAEvCL,EAAAA,EAAAA,KAACC,EAAAA,GAAc,CAAAF,SAAS,OAAP+C,QAAO,IAAPA,OAAO,EAAPA,EAASrB,QAC1BzB,EAAAA,EAAAA,KAACC,EAAAA,GAAc,CAAAF,SAAS,OAAP+C,QAAO,IAAPA,OAAO,EAAPA,EAASjE,SAC1BuC,EAAAA,EAAAA,MAACnB,EAAAA,GAAc,CAAAF,SAAA,CACZ,KACDC,EAAAA,EAAAA,KAAA,QAAMG,UAAS,IAAA9B,OAAwB,WAAX,OAAPyE,QAAO,IAAPA,OAAO,EAAPA,EAASpB,MAAmB,aAAe,aAAY,2BAA0B3B,SAC5F,OAAP+C,QAAO,IAAPA,OAAO,EAAPA,EAASpB,WAId1B,EAAAA,EAAAA,KAACC,EAAAA,GAAc,CAAAF,SAAE,IAAImD,KAAY,OAAPJ,QAAO,IAAPA,OAAO,EAAPA,EAASK,WAAWC,wBAE9ChC,EAAAA,EAAAA,MAACnB,EAAAA,GAAc,CAAAF,SAAA,EACbC,EAAAA,EAAAA,KAAC2B,EAAAA,GAAI,CAACC,GAAE,eAAAvD,OAAwB,OAAPyE,QAAO,IAAPA,OAAO,EAAPA,EAASjB,KAAM9B,UACtCC,EAAAA,EAAAA,KAACqD,EAAAA,EAAU,OAGbrD,EAAAA,EAAAA,KAACsD,EAAAA,GAAQ,CAACC,QAAQ,SAAQxD,UACxBC,EAAAA,EAAAA,KAAC8B,EAAAA,GAAO,CACNC,MAAM,SACNC,QAAQ,UACRC,MAAO,CAAEC,OAAQ,OAAQC,MAAO,OAAQC,SAAU,YAClDjC,UAAU,YACVuC,QAASA,IAAMnC,GAAa,GAAMR,UAElCC,EAAAA,EAAAA,KAACqC,EAAAA,EAAK,CAACC,KAAMK,EAAAA,EAAUV,MAAO,CAAEG,SAAU,WAAYI,IAAK,MAAOC,KAAM,iBAI9EzC,EAAAA,EAAAA,KAAC4C,EAAAA,EAAW,CACVC,WArCeW,KACnBrE,EAAc,CAAEf,GAAW,OAAP0E,QAAO,IAAPA,OAAO,EAAPA,EAASjB,IAAKxC,iBAAkBR,GAAQ,EAqCxDyB,UAAWA,EACXC,aAAcA,EACdnC,GAAW,OAAP0E,QAAO,IAAPA,OAAO,EAAPA,EAASjB,IACbnB,cAAeD,MApCI,OAAPqC,QAAO,IAAPA,OAAO,EAAPA,EAASjB,IAsCb,ECehB,EAhEgB4B,KACd,MAAM,KAAEjF,EAAI,UAAEiC,EAAS,QAAEE,IAAYjB,EAAAA,EAAAA,MACrC,IAAI6D,EAAU,KAgBd,OAfI9C,IACF8C,GAAUvD,EAAAA,EAAAA,KAAC0D,EAAAA,EAAO,MAEfjD,GAAaE,IAChB4C,GAAUvD,EAAAA,EAAAA,KAAC2D,EAAAA,EAAK,CAAA5D,SAAC,wBAEdU,GAAcE,GAA2B,IAAhBnC,EAAKoF,SACjCL,GAAUvD,EAAAA,EAAAA,KAAC2D,EAAAA,EAAK,CAAA5D,SAAC,kCAEdU,IAAcE,GAAWnC,EAAKoF,OAAS,IAC1CL,EAAc,OAAJ/E,QAAI,IAAJA,OAAI,EAAJA,EAAMqF,KAAI,CAACf,EAASzC,KAC5BL,EAAAA,EAAAA,KAAC8D,EAAmB,CAAoBhB,QAASA,EAASzC,MAAOA,GAAhC,OAAPyC,QAAO,IAAPA,OAAO,EAAPA,EAASjB,SAKrC7B,EAAAA,EAAAA,KAAC+D,EAAAA,GAAI,CAAAhE,UACHC,EAAAA,EAAAA,KAACgE,EAAAA,GAAI,CAACC,GAAI,GAAGlE,UACXqB,EAAAA,EAAAA,MAAC8C,EAAAA,GAAK,CAAC/D,UAAU,OAAMJ,SAAA,EACrBC,EAAAA,EAAAA,KAACmE,EAAAA,EAAgB,CAACvC,GAAI,aAAcwC,MAAO,0BAC3ChD,EAAAA,EAAAA,MAACiD,EAAAA,GAAS,CAAAtE,SAAA,EACRC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,iBACNqB,EAAAA,EAAAA,MAACkD,EAAAA,GAAM,CAACC,MAAM,SAASpE,UAAU,cAAcqE,UAAQ,EAACC,OAAK,EAACC,YAAU,EAAA3E,SAAA,EACtEC,EAAAA,EAAAA,KAAC2E,EAAAA,GAAU,CAAC5C,MAAM,QAAOhC,UACvBqB,EAAAA,EAAAA,MAACE,EAAAA,GAAS,CAACnB,UAAU,aAAYJ,SAAA,EAC/BC,EAAAA,EAAAA,KAACuB,EAAAA,GAAgB,CAACC,MAAM,MAAMS,MAAO,CAAEE,MAAO,WAAYpC,SAAC,aAI3DC,EAAAA,EAAAA,KAACuB,EAAAA,GAAgB,CAACC,MAAM,MAAKzB,SAAC,UAE9BC,EAAAA,EAAAA,KAACuB,EAAAA,GAAgB,CAACC,MAAM,MAAKzB,SAAC,WAE9BC,EAAAA,EAAAA,KAACuB,EAAAA,GAAgB,CAACC,MAAM,MAAKzB,SAAC,UAE9BC,EAAAA,EAAAA,KAACuB,EAAAA,GAAgB,CAACC,MAAM,MAAKzB,SAAC,gBAE9BC,EAAAA,EAAAA,KAACuB,EAAAA,GAAgB,CACfC,MAAM,MACNS,MAAO,CACLE,MAAO,QACPyC,SAAU,SACV7E,SACH,kBAKLC,EAAAA,EAAAA,KAAC6E,EAAAA,GAAU,CAAA9E,SAAEwD,gBAShB,ECHX,EAxDqBuB,KACnB,MAAQtG,KAAMuG,EAAWtE,UAAWuE,EAAcrE,QAASsE,IAAe3F,EAAAA,EAAAA,MAE1E,IAAIiE,EAAU,KAed,OAdIyB,IACFzB,GAAUvD,EAAAA,EAAAA,KAAA,KAAAD,SAAG,iBAEViF,GAAgBC,IACnB1B,GAAUvD,EAAAA,EAAAA,KAAA,KAAGG,UAAU,cAAaJ,SAAC,8BAElCiF,GAAiBC,GAAoC,KAAb,OAATF,QAAS,IAATA,OAAS,EAATA,EAAWnB,UAC7CL,GAAUvD,EAAAA,EAAAA,KAAA,KAAGG,UAAU,cAAaJ,SAAC,wBAElCiF,IAAiBC,IAAuB,OAATF,QAAS,IAATA,OAAS,EAATA,EAAWnB,QAAS,IACtDL,EAAmB,OAATwB,QAAS,IAATA,OAAS,EAATA,EAAWlB,KAAI,CAACzD,EAAOC,KAC/BL,EAAAA,EAAAA,KAACkF,EAAa,CAAkB7E,MAAOA,EAAOD,MAAOA,GAA5B,OAALA,QAAK,IAALA,OAAK,EAALA,EAAOyB,SAI7B7B,EAAAA,EAAAA,KAAAqB,EAAAA,SAAA,CAAAtB,UACEqB,EAAAA,EAAAA,MAAC2C,EAAAA,GAAI,CAAAhE,SAAA,EACHC,EAAAA,EAAAA,KAACgE,EAAAA,GAAI,CAACC,GAAI,GAAGlE,UACXqB,EAAAA,EAAAA,MAAC8C,EAAAA,GAAK,CAAC/D,UAAU,OAAMJ,SAAA,EACrBC,EAAAA,EAAAA,KAACmE,EAAAA,EAAgB,CAACvC,GAAG,IAAIwC,MAAM,iBAC/BhD,EAAAA,EAAAA,MAACiD,EAAAA,GAAS,CAAAtE,SAAA,EACRC,EAAAA,EAAAA,KAAA,QAAMG,UAAU,6BAA4BJ,SAAC,6CAI7CqB,EAAAA,EAAAA,MAACkD,EAAAA,GAAM,CAACC,MAAM,SAASpE,UAAU,cAAcsE,OAAK,EAACC,YAAU,EAACF,UAAQ,EAAAzE,SAAA,EACtEC,EAAAA,EAAAA,KAAC2E,EAAAA,GAAU,CAAC5C,MAAM,QAAOhC,UACvBqB,EAAAA,EAAAA,MAACE,EAAAA,GAAS,CAACnB,UAAU,aAAYJ,SAAA,EAC/BC,EAAAA,EAAAA,KAACuB,EAAAA,GAAgB,CAACC,MAAM,MAAMS,MAAO,CAAEE,MAAO,WAAYpC,SAAC,aAG3DC,EAAAA,EAAAA,KAACuB,EAAAA,GAAgB,CAACC,MAAM,MAAKzB,SAAC,UAC9BC,EAAAA,EAAAA,KAACuB,EAAAA,GAAgB,CAACC,MAAM,MAAKzB,SAAC,WAC9BC,EAAAA,EAAAA,KAACuB,EAAAA,GAAgB,CAACC,MAAM,MAAKzB,SAAC,UAC9BC,EAAAA,EAAAA,KAACuB,EAAAA,GAAgB,CAACC,MAAM,MAAMS,MAAO,CAAEE,MAAO,SAAUpC,SAAC,kBAK7DC,EAAAA,EAAAA,KAAC6E,EAAAA,GAAU,CAAA9E,SAAEwD,gBAKrBvD,EAAAA,EAAAA,KAACgE,EAAAA,GAAI,CAAAjE,UACHC,EAAAA,EAAAA,KAACyD,EAAO,UAGX,C","sources":["redux/admin/AdminApi.js","ui/error/Error.js","views/admins/manage-admins/AdminTableRow.jsx","views/settings/manger/MangerTableRowData.jsx","views/settings/manger/Manager.jsx","views/admins/manage-admins/ManageAdmins.jsx"],"sourcesContent":["/* eslint-disable prettier/prettier */\nimport { apiSlice } from \"../api/apiSlice\";\n\nexport const adminApi = apiSlice.injectEndpoints({\n  tagTypes: [\"AllAdmin\", \"SingleAdmin\", \"AllManager\"],\n  endpoints: (builder) => ({\n    //GET ALL ADMIN\n    getAllAdmins: builder.query({\n      query: () => ({\n        url: `/admin/allAdmin`,\n        method: \"GET\",\n      }),\n      providesTags: [\"AllAdmin\"],\n    }),\n\n    // GET SINGLE ADMIN\n    getSingleAdmin: builder.query({\n      query: (id) => ({\n        url: `/admin/${id}`,\n        method: \"GET\",\n      }),\n      providesTags: [\"SingleAdmin\"],\n    }),\n\n    //TODO: CREATE ADMIN\n    createNewAdmin: builder.mutation({\n      query: (data) => ({\n        url: `/admin/register`,\n        method: \"POST\",\n        body: data,\n      }),\n      invalidatesTags: [\"SingleAdmin\"],\n    }),\n\n    // // ADMIN PASSWORD CHANGE\n    changeAdminPassword: builder.mutation({\n      query: ({ email, data }) => ({\n        url: `/admin/changeAdminPassword/${email}`,\n        method: \"PUT\",\n        body: data,\n      }),\n      invalidatesTags: [\"SingleAdmin\"],\n    }),\n\n    // AN  ADMIN DELETE\n    deleteAdmin: builder.mutation({\n      query: (id) => ({\n        url: `/admin/deleteAdmin/${id}`, // here id is a email address\n        method: \"DELETE\",\n      }),\n      invalidatesTags: [\"AllAdmin\"],\n    }),\n\n    // GET SINGLE ADMIN\n    getAllManager: builder.query({\n      query: () => ({\n        url: `/admin/manager/all`,\n        method: \"GET\",\n      }),\n      providesTags: [\"AllManager\"],\n    }),\n\n    // Add manager\n    addManager: builder.mutation({\n      query: (data) => ({\n        url: `/admin/manger`,\n        method: \"POST\",\n        body: data,\n      }),\n      invalidatesTags: [\"AllManager\"],\n    }),\n\n    // Update manager\n    updateManager: builder.mutation({\n      query: ({ id, data }) => ({\n        url: `/admin/updateAndPasswordChange/${id}`,\n        method: \"PUT\",\n        body: data,\n      }),\n      invalidatesTags: [\"AllManager\", \"SingleAdmin\"],\n    }),\n\n    // AN  ADMIN DELETE\n    deleteManager: builder.mutation({\n      query: ({ id, currentUserEmail }) => ({\n        url: `/admin/manager/${id}`,\n        method: \"DELETE\",\n        body: { currentUserEmail },\n      }),\n      invalidatesTags: [\"AllManager\"],\n    }),\n  }),\n});\n\nexport const {\n  useGetAllAdminsQuery,//\n  useGetSingleAdminQuery,//\n  useCreateNewAdminMutation,//\n  useDeleteAdminMutation,//\n  useGetAllManagerQuery,//\n  useAddManagerMutation,//\n  useDeleteManagerMutation,//\n  useUpdateManagerMutation,\n  useChangeAdminPasswordMutation,//\n} = adminApi;\n","import { CTableDataCell } from \"@coreui/react\";\n\nconst Error = ({ children }) => {\n  return (\n    <CTableDataCell colSpan={\"100%\"} className=\"text-danger text-center py-2\">\n      {children}\n    </CTableDataCell>\n  );\n};\n\nexport default Error;\n","/* eslint-disable prettier/prettier */\n/* eslint-disable no-lone-blocks */\nimport { useEffect, useState } from \"react\";\nimport { cilPencil, cilTrash } from \"@coreui/icons\";\nimport CIcon from \"@coreui/icons-react\";\nimport { CButton, CTableDataCell, CTableHeaderCell, CTableRow } from \"@coreui/react\";\nimport { Link } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport { useDeleteAdminMutation } from \"src/redux/admin/AdminApi\";\nimport DeleteModal from \"src/ui/DeleteModal\";\n\nconst AdminTableRow = ({ admin, index }) => {\n  const [showModal, setShowModal] = useState(false);\n  const [\n    deleteAdmin,\n    { isLoading: deleteLoading, isError: deleteError, isSuccess: deleteSuccess },\n  ] = useDeleteAdminMutation();\n\n  useEffect(() => {\n    toast.dismiss();\n    deleteError && toast.error(\"Admin delete failed\", { id: \"dError\" });\n    deleteSuccess && toast.success(\"Admin delete success\", { id: \"dSuccess\" });\n  }, [deleteError, deleteSuccess]);\n  return (\n    <>\n      <CTableRow>\n        <CTableHeaderCell scope=\"row\">{index + 1}</CTableHeaderCell>\n        <CTableDataCell>{admin?.name}</CTableDataCell>\n        <CTableDataCell>{admin?.email}</CTableDataCell>\n        <CTableDataCell>\n          <span className=\"bg-success p-1 rounded\">{admin?.role}</span>\n        </CTableDataCell>\n        <CTableDataCell>\n          <div className=\"\">\n            <Link to={`/admin/edit/${admin?._id}?superAdmin=true`}>\n              <CButton\n                color=\"success\"\n                variant=\"outline\"\n                style={{ height: \"30px\", width: \"32px\", position: \"relative\" }}\n              >\n                <CIcon icon={cilPencil} style={{ position: \"absolute\", top: \"25%\", left: \"25%\" }} />\n              </CButton>\n            </Link>\n            <CButton\n              color=\"danger\"\n              variant=\"outline\"\n              style={{ height: \"30px\", width: \"32px\", position: \"relative\" }}\n              className=\"ms-2\"\n              onClick={() => setShowModal(true)}\n            >\n              <CIcon icon={cilTrash} style={{ position: \"absolute\", top: \"25%\", left: \"25%\" }} />\n            </CButton>\n          </div>\n        </CTableDataCell>\n      </CTableRow>\n      <DeleteModal\n        deleteThis={deleteAdmin}\n        showModal={showModal}\n        setShowModal={setShowModal}\n        id={admin?._id}\n        deleteLoading={deleteLoading}\n      />\n    </>\n  );\n};\n\nexport default AdminTableRow;\n","import { cilTrash } from \"@coreui/icons\";\nimport CIcon from \"@coreui/icons-react\";\nimport { CButton, CTableDataCell, CTableHeaderCell, CTableRow, CTooltip } from \"@coreui/react\";\nimport { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\n\nimport { toast } from \"react-toastify\";\nimport { useDeleteManagerMutation } from \"src/redux/admin/AdminApi\";\nimport DeleteModal from \"src/ui/DeleteModal\";\nimport EditButton from \"src/ui/button/EditButton\";\n\nconst MangerTableRowData = ({ manager, index }) => {\n  const [showModal, setShowModal] = useState(false);\n  const [deleteManager, { isLoading, isError, isSuccess }] = useDeleteManagerMutation();\n  const { email } = useSelector((state) => state.auth) || {};\n\n  useEffect(() => {\n    isSuccess && toast.success(\"Delete  Success\");\n    isError && toast.error(\"Delete  Failed\");\n  }, [isSuccess, isError]);\n\n  const handleDelete = () => {\n    deleteManager({ id: manager?._id, currentUserEmail: email });\n  };\n\n  return (\n    <CTableRow key={manager?._id}>\n      <CTableHeaderCell scope=\"row\">{index + 1}</CTableHeaderCell>\n\n      <CTableDataCell>{manager?.name}</CTableDataCell>\n      <CTableDataCell>{manager?.email}</CTableDataCell>\n      <CTableDataCell>\n        {\" \"}\n        <span className={` ${manager?.role === \"admin\" ? \"bg-success\" : \"bg-warning\"} p-1 rounded text-white`}>\n          {manager?.role}\n        </span>\n      </CTableDataCell>\n\n      <CTableDataCell>{new Date(manager?.createdAt).toLocaleDateString()}</CTableDataCell>\n\n      <CTableDataCell>\n        <Link to={`/admin/edit/${manager?._id}`}>\n          <EditButton />\n        </Link>\n\n        <CTooltip content=\"Delete\">\n          <CButton\n            color=\"danger\"\n            variant=\"outline\"\n            style={{ height: \"30px\", width: \"32px\", position: \"relative\" }}\n            className=\"ms-2 mb-1\"\n            onClick={() => setShowModal(true)}\n          >\n            <CIcon icon={cilTrash} style={{ position: \"absolute\", top: \"25%\", left: \"25%\" }} />\n          </CButton>\n        </CTooltip>\n      </CTableDataCell>\n      <DeleteModal\n        deleteThis={handleDelete}\n        showModal={showModal}\n        setShowModal={setShowModal}\n        id={manager?._id}\n        deleteLoading={isLoading}\n      />\n    </CTableRow>\n  );\n};\n\nexport default MangerTableRowData;\n","import {\n  CCard,\n  CCardBody,\n  CCol,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n} from \"@coreui/react\";\nimport { useGetAllManagerQuery } from \"src/redux/admin/AdminApi\";\nimport CardHeaderButton from \"src/ui/CardHeaderButton\";\nimport Loading from \"src/ui/Loading\";\nimport Error from \"src/ui/error/Error\";\nimport ManagerTableRowData from \"./MangerTableRowData\";\nconst Manager = () => {\n  const { data, isLoading, isError } = useGetAllManagerQuery();\n  let content = null;\n  if (isLoading) {\n    content = <Loading />;\n  }\n  if (!isLoading && isError) {\n    content = <Error>There was en error</Error>;\n  }\n  if (!isLoading && !isError && data.length === 0) {\n    content = <Error>There is no admin or manger</Error>;\n  }\n  if (!isLoading && !isError && data.length > 0) {\n    content = data?.map((manager, index) => (\n      <ManagerTableRowData key={manager?._id} manager={manager} index={index} />\n    ));\n  }\n\n  return (\n    <CRow>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CardHeaderButton to={\"/admin/add\"} title={\"All admin & managers\"} />\n          <CCardBody>\n            <span>Super Admin</span>\n            <CTable align=\"middle\" className=\"mb-0 border\" bordered hover responsive>\n              <CTableHead color=\"light\">\n                <CTableRow className=\"text-start\">\n                  <CTableHeaderCell scope=\"col\" style={{ width: \"3.75rem\" }}>\n                    Sl. No.\n                  </CTableHeaderCell>\n\n                  <CTableHeaderCell scope=\"col\">Name</CTableHeaderCell>\n\n                  <CTableHeaderCell scope=\"col\">Email</CTableHeaderCell>\n\n                  <CTableHeaderCell scope=\"col\">Role</CTableHeaderCell>\n\n                  <CTableHeaderCell scope=\"col\">Added Date</CTableHeaderCell>\n\n                  <CTableHeaderCell\n                    scope=\"col\"\n                    style={{\n                      width: \"100px\",\n                      minWidth: \"100px\",\n                    }}\n                  >\n                    Actions\n                  </CTableHeaderCell>\n                </CTableRow>\n              </CTableHead>\n              <CTableBody>{content}</CTableBody>\n            </CTable>\n            {/* <PaginationButton\n            searchUrl={location.search}\n            totalPageNumber={AllNewsLetter?.result?.totalPageNumber}\n          /> */}\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n};\n\nexport default Manager;\n","/* eslint-disable prettier/prettier */\nimport {\n  CCard,\n  CCardBody,\n  CCol,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n} from \"@coreui/react\";\nimport { useGetAllAdminsQuery } from \"src/redux/admin/AdminApi\";\nimport CardHeaderButton from \"src/ui/CardHeaderButton\";\nimport AdminTableRow from \"./AdminTableRow\";\nimport Manager from \"src/views/settings/manger/Manager\";\n\nconst ManageAdmins = () => {\n  const { data: allAdmins, isLoading: adminLoading, isError: adminError } = useGetAllAdminsQuery();\n\n  let content = null;\n  if (adminLoading) {\n    content = <p>Loading...</p>;\n  }\n  if (!adminLoading && adminError) {\n    content = <p className=\"text-danger\">There is something wrong</p>;\n  }\n  if (!adminLoading && !adminError && allAdmins?.length === 0) {\n    content = <p className=\"text-danger\">There is no admin</p>;\n  }\n  if (!adminLoading && !adminError && allAdmins?.length > 0) {\n    content = allAdmins?.map((admin, index) => (\n      <AdminTableRow key={admin?._id} index={index} admin={admin} />\n    ));\n  }\n  return (\n    <>\n      <CRow>\n        <CCol xs={12}>\n          <CCard className=\"mb-4\">\n            <CardHeaderButton to=\".\" title=\"Super Admin\" />\n            <CCardBody>\n              <span className=\"text-medium-emphasis small\">\n                Here is the list of all admin & mangers\n              </span>\n\n              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive bordered>\n                <CTableHead color=\"light\">\n                  <CTableRow className=\"text-start\">\n                    <CTableHeaderCell scope=\"col\" style={{ width: \"3.75rem\" }}>\n                      Sl. No.\n                    </CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Name</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Email</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Role</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\" style={{ width: \"100px\" }}>\n                      Actions\n                    </CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>{content}</CTableBody>\n              </CTable>\n            </CCardBody>\n          </CCard>\n        </CCol>\n        <CCol>\n          <Manager />\n        </CCol>\n      </CRow>\n    </>\n  );\n};\n\nexport default ManageAdmins;\n"],"names":["adminApi","apiSlice","injectEndpoints","tagTypes","endpoints","builder","getAllAdmins","query","url","method","providesTags","getSingleAdmin","id","concat","createNewAdmin","mutation","data","body","invalidatesTags","changeAdminPassword","_ref","email","deleteAdmin","getAllManager","addManager","updateManager","_ref2","deleteManager","_ref3","currentUserEmail","useGetAllAdminsQuery","useGetSingleAdminQuery","useCreateNewAdminMutation","useDeleteAdminMutation","useGetAllManagerQuery","useAddManagerMutation","useDeleteManagerMutation","useUpdateManagerMutation","useChangeAdminPasswordMutation","children","_jsx","CTableDataCell","colSpan","className","admin","index","showModal","setShowModal","useState","isLoading","deleteLoading","isError","deleteError","isSuccess","deleteSuccess","useEffect","toast","dismiss","error","success","_jsxs","_Fragment","CTableRow","CTableHeaderCell","scope","name","role","Link","to","_id","CButton","color","variant","style","height","width","position","CIcon","icon","cilPencil","top","left","onClick","cilTrash","DeleteModal","deleteThis","manager","useSelector","state","auth","Date","createdAt","toLocaleDateString","EditButton","CTooltip","content","handleDelete","Manager","Loading","Error","length","map","ManagerTableRowData","CRow","CCol","xs","CCard","CardHeaderButton","title","CCardBody","CTable","align","bordered","hover","responsive","CTableHead","minWidth","CTableBody","ManageAdmins","allAdmins","adminLoading","adminError","AdminTableRow"],"sourceRoot":""}