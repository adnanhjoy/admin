{"version":3,"file":"static/js/9293.04b0ac98.chunk.js","mappings":"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","sources":["redux/productType/productTypeApi.js","components/products/AddProductTypeForm.jsx","views/products/add-product-type/AddProductType.jsx"],"sourcesContent":["/* eslint-disable prettier/prettier */\r\nimport { apiSlice } from \"../api/apiSlice\";\r\n\r\nexport const productTypeApi = apiSlice.injectEndpoints({\r\n    tagTypes: [\"AllProductType\", \"SingleProductType\"],\r\n\r\n    endpoints: (builder) => ({\r\n        //get all product type\r\n        getAllproductType: builder.query({\r\n            query: () => ({\r\n                url: `/product-type`,\r\n                method: \"GET\",\r\n            }),\r\n            providesTags: [\"AllProductType\"],\r\n        }),\r\n\r\n        // add product type \r\n        addProductType: builder.mutation({\r\n            query: ({ data }) => ({\r\n                url: `/product-type`,\r\n                method: \"POST\",\r\n                body: data,\r\n            }),\r\n            invalidatesTags: [\"AllProductType\", \"SingleProductType\"],\r\n        }),\r\n\r\n        //get single product type\r\n        getSingleProductType: builder.query({\r\n            query: (id) => ({\r\n                url: `/product-type/${id}`,\r\n                method: \"GET\",\r\n            }),\r\n            providesTags: [\"SingleProductType\"],\r\n        }),\r\n\r\n        //get single product type\r\n        updateSingleProductType: builder.mutation({\r\n            query: ({ id, data }) => ({\r\n                url: `/product-type/${id}`,\r\n                method: \"PUT\",\r\n                body: data,\r\n            }),\r\n            invalidatesTags: [\"AllProductType\", \"SingleProductType\"],\r\n        }),\r\n\r\n        //get single product type\r\n        deleteSingleProductType: builder.mutation({\r\n            query: (id) => ({\r\n                url: `/product-type/${id}`,\r\n                method: \"DELETE\",\r\n            }),\r\n            invalidatesTags: [\"AllProductType\", \"SingleProductType\"],\r\n        }),\r\n    }),\r\n});\r\n\r\nexport const {\r\n    useGetAllproductTypeQuery,\r\n    useAddProductTypeMutation,\r\n    useGetSingleProductTypeQuery,\r\n    useUpdateSingleProductTypeMutation,\r\n    useDeleteSingleProductTypeMutation,\r\n} = productTypeApi;\r\n","import { cilPlus } from \"@coreui/icons\";\r\nimport CIcon from \"@coreui/icons-react\";\r\nimport { CButton, CCol, CForm, CFormInput, CRow } from \"@coreui/react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport CancelButton from \"src/ui/button/CancelButton\";\r\n\r\nconst AddProductTypeForm = (props) => {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    watch,\r\n    formState: { errors },\r\n    control,\r\n  } = useForm();\r\nconsole.log(props)\r\n  return (\r\n    <CForm onSubmit={handleSubmit(props.onSubmit)}>\r\n      <CRow className=\"g-3\">\r\n        <CCol xs={12}>\r\n          <CFormInput\r\n            type=\"text\"\r\n            id=\"manufacturerNameInputField\"\r\n            label=\"Product Type\"\r\n            placeholder=\"Enter Product type\"\r\n            defaultValue={props?.data?.title}\r\n            aria-describedby=\"manufacturerNameInputField\"\r\n            {...register(\"title\", { required: props?.data ? false : true })}\r\n          />\r\n        </CCol>\r\n      </CRow>\r\n      <div className=\"text-end\">\r\n        <CancelButton />\r\n        <CButton type=\"submit\" color=\"primary\" className=\"mt-3\">\r\n          <CIcon icon={cilPlus} className=\"me-2\" />\r\n          {props?.isLoading ? \"Loading..\" : \"Save\"}\r\n        </CButton>\r\n      </div>\r\n    </CForm>\r\n  );\r\n};\r\n\r\nexport default AddProductTypeForm;\r\n\r\nAddProductTypeForm.propTypes = {\r\n  data: PropTypes.shape({\r\n    name: PropTypes.string,\r\n    description: PropTypes.string,\r\n  }),\r\n  onSubmit: PropTypes.func,\r\n};\r\n","import { CCard, CCardBody, CCardHeader, CCol, CRow } from \"@coreui/react\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport AddProductTypeForm from \"src/components/products/AddProductTypeForm\";\r\nimport { useAddProductTypeMutation, useGetSingleProductTypeQuery, useUpdateSingleProductTypeMutation } from \"src/redux/productType/productTypeApi\";\r\n\r\nconst AddproductType = () => {\r\n    const { id } = useParams();\r\n    const [haveId, setHaveId] = useState(true);\r\n    const { data } = useGetSingleProductTypeQuery(id, { skip: haveId });\r\n    console.log(data)\r\n    const [\r\n        updateProductType,\r\n        { isLoading: updateLoading, isSuccess: updateSuccess, isError: updateError },\r\n    ] = useUpdateSingleProductTypeMutation();\r\n    const [addProductType, { isLoading: addLoading, isSuccess: addSuccess, isError: addError }] =\r\n        useAddProductTypeMutation();\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            setHaveId(false);\r\n        }\r\n    }, [id]);\r\n\r\n    const handleProductType = (data) => {\r\n        if (id) {\r\n            updateProductType({ id, data });\r\n        } else {\r\n            addProductType({ data });\r\n        }\r\n\r\n    };\r\n\r\n    const navigate = useNavigate();\r\n    useEffect(() => {\r\n        addSuccess && navigate(-1);\r\n        updateSuccess && navigate(-1);\r\n    }, [updateSuccess, addSuccess]);\r\n\r\n    useEffect(() => {\r\n        toast.dismiss();\r\n        if (addError) {\r\n            toast.error(\"Product Type added failed\");\r\n        }\r\n        if (updateError) {\r\n            toast.error(\"Product Type updated\");\r\n        }\r\n    }, [addError, updateError]);\r\n\r\n    return (\r\n        <>\r\n            <CRow>\r\n                <CCol xs={12}>\r\n                    <CCard className=\"mb-4\">\r\n                        <CCardHeader>\r\n                            <strong>{id ? \"Edit\" : \"Add\"} Product Type</strong>\r\n                        </CCardHeader>\r\n                        <CCardBody>\r\n                            <AddProductTypeForm\r\n                                isLoading={updateLoading || addLoading}\r\n                                data={data?.result}\r\n                                onSubmit={handleProductType}\r\n                            />\r\n                        </CCardBody>\r\n                    </CCard>\r\n                </CCol>\r\n            </CRow>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AddproductType;\r\n"],"names":["productTypeApi","apiSlice","injectEndpoints","tagTypes","endpoints","builder","getAllproductType","query","url","method","providesTags","addProductType","mutation","_ref","data","body","invalidatesTags","getSingleProductType","id","concat","updateSingleProductType","_ref2","deleteSingleProductType","useGetAllproductTypeQuery","useAddProductTypeMutation","useGetSingleProductTypeQuery","useUpdateSingleProductTypeMutation","useDeleteSingleProductTypeMutation","props","_props$data","register","handleSubmit","watch","formState","errors","control","useForm","console","log","_jsxs","CForm","onSubmit","children","_jsx","CRow","className","CCol","xs","CFormInput","type","label","placeholder","defaultValue","title","required","CancelButton","CButton","color","CIcon","icon","cilPlus","isLoading","AddproductType","useParams","haveId","setHaveId","useState","skip","updateProductType","updateLoading","isSuccess","updateSuccess","isError","updateError","addLoading","addSuccess","addError","useEffect","navigate","useNavigate","toast","dismiss","error","_Fragment","CCard","CCardHeader","CCardBody","AddProductTypeForm","result"],"sourceRoot":""}