{"version":3,"file":"static/js/3202.217b2b11.chunk.js","mappings":"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","sources":["components/admins/AddAdminForm.jsx","views/admins/add-admin/AddAdmin.jsx"],"sourcesContent":["import { cilPlus } from \"@coreui/icons\";\nimport CIcon from \"@coreui/icons-react\";\nimport {\n  CButton,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormLabel,\n  CFormSelect,\n  CInputGroup,\n  CInputGroupText,\n  CRow,\n} from \"@coreui/react\";\nimport PropTypes from \"prop-types\";\nimport { memo, useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { BsEye, BsEyeSlash } from \"react-icons/bs\";\nimport { useLocation } from \"react-router-dom\";\nimport CancelButton from \"src/ui/button/CancelButton\";\nimport Select from \"react-select\";\n\nconst AddAdminForm = ({ data, isLoading, onSubmit, setRole }) => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    setValue,\n  } = useForm();\n\n  const location = useLocation().search;\n\n  const [isShowOldPassword, setIsShowOldPassword] = useState(false);\n  const [isShowNewPassword, setIsShowNewPassword] = useState(false);\n\n  const roleOptions = [\n    { value: \"admin\", label: \"Admin\" },\n    { value: \"manager\", label: \"Manager\" },\n  ];\n\n  const [defaultValue, setDefaultValue] = useState(null);\n\n  useEffect(() => {\n    // Simulating fetching the default value from the server\n    const defaultValueFromServer = data?.role;\n    // Find the option object that matches the defaultValueFromServer\n    const selectedOption = roleOptions.find((option) => option.value === defaultValueFromServer);\n    setDefaultValue(selectedOption);\n  }, [data]);\n\n  return (\n    <CForm onSubmit={handleSubmit(onSubmit)}>\n      <CRow className=\"g-3\">\n        <CFormLabel htmlFor=\"oldPassword\">\n          Name {!data && <span className=\"text-danger\">*</span>}\n        </CFormLabel>\n\n        <CCol xs={12}>\n          <CFormInput\n            type=\"text\"\n            id=\"firstNameInputField\"\n            placeholder=\"Enter Name\"\n            defaultValue={data?.name}\n            aria-describedby=\"adminName\"\n            {...register(\"name\", { required: data ? false : true })}\n          />\n\n          {errors?.name && <div className=\"text-danger form-error\">Name is required</div>}\n        </CCol>\n        <CCol xs={12}>\n          <CFormLabel htmlFor=\"oldPassword\">\n            Email {!data && <span className=\"text-danger\">*</span>}\n          </CFormLabel>\n\n          <CFormInput\n            type=\"text\"\n            id=\"emailInputField\"\n            placeholder=\"Enter Email\"\n            disabled={data ? true : false}\n            defaultValue={data?.email}\n            aria-describedby=\"emailInputField\"\n            {...register(\"email\", { required: data ? false : true })}\n          />\n\n          {errors?.email && <div className=\"text-danger form-error\">Email is required </div>}\n        </CCol>\n\n        {data && (\n          <CCol xs={12}>\n            <CFormLabel htmlFor=\"Password\">Enter old password</CFormLabel>\n            <CInputGroup>\n              <CFormInput\n                type={isShowOldPassword ? \"text\" : \"password\"}\n                id=\"Password\"\n                placeholder=\"Enter old password\"\n                aria-describedby=\"Password\"\n                className=\"border-end-0\"\n                {...register(\"oldPassword\", { required: false })}\n              />\n              <CInputGroupText\n                className=\"border-start-0 bg-transparent\"\n                style={{ cursor: \"pointer\" }}\n                onClick={() => setIsShowOldPassword((prevState) => !prevState)}\n              >\n                {isShowOldPassword ? <BsEye /> : <BsEyeSlash />}\n              </CInputGroupText>\n            </CInputGroup>\n          </CCol>\n        )}\n\n        <CCol xs={12}>\n          <CFormLabel htmlFor=\"Password\">\n            {data ? \"Enter new password\" : \"Password\"}{\" \"}\n            {!data && <span className=\"text-danger\">*</span>}\n          </CFormLabel>\n          <CInputGroup>\n            <CFormInput\n              type={isShowNewPassword ? \"text\" : \"password\"}\n              id=\"Password\"\n              placeholder=\"Enter password\"\n              aria-describedby=\"Password\"\n              className=\"border-end-0\"\n              {...register(\"password\", {\n                required: data ? false : true,\n              })}\n            />\n            <CInputGroupText\n              className=\"border-start-0 bg-transparent\"\n              style={{ cursor: \"pointer\" }}\n              onClick={() => setIsShowNewPassword((prevState) => !prevState)}\n            >\n              {isShowNewPassword ? <BsEye /> : <BsEyeSlash />}\n            </CInputGroupText>\n          </CInputGroup>\n          {errors?.password && <div className=\"text-danger form-error\">Password is required</div>}\n        </CCol>\n      </CRow>\n\n      {!location.includes(\"superAdmin\") && defaultValue && (\n        <CCol xs={12}>\n          <label className=\"mb-2\">\n            Role <span className=\"text-danger\">*</span>\n          </label>\n          <Select\n            aria-label=\"Selection Field\"\n            defaultValue={defaultValue}\n            options={roleOptions}\n            onChange={(e) => setRole(e.value)}\n            name=\"role\"\n          />\n        </CCol>\n      )}\n      {!data && (\n        <CCol xs={12}>\n          <label className=\"mb-2\">\n            Role <span className=\"text-danger\">*</span>{\" \"}\n          </label>\n          <Select\n            aria-label=\"Selection Field\"\n            defaultValue={defaultValue}\n            options={roleOptions}\n            // {...register(\"role\", {\n            //   required: data ? false : true,\n            // })}\n            onChange={(e) => setRole(e.value)}\n            name=\"role\"\n          />\n        </CCol>\n      )}\n\n      <div className=\"text-end\">\n        <CancelButton />\n        <CButton type=\"submit\" color=\"primary\" className=\"mt-3\">\n          <CIcon icon={cilPlus} className=\"me-2\" />\n          {isLoading ? \"Loading..\" : \"Save\"}\n        </CButton>\n      </div>\n    </CForm>\n  );\n};\n\nexport default memo(AddAdminForm);\n\nAddAdminForm.propTypes = {\n  data: PropTypes.shape({\n    name: PropTypes.string,\n    description: PropTypes.string,\n  }),\n  onSubmit: PropTypes.func,\n};\n","import { CCard, CCardBody, CCardHeader, CCol, CRow } from \"@coreui/react\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport AddAdminForm from \"src/components/admins/AddAdminForm\";\nimport {\n  useAddManagerMutation,\n  useChangeAdminPasswordMutation,\n  useGetSingleAdminQuery,\n  useUpdateManagerMutation,\n} from \"src/redux/admin/AdminApi\";\nimport HeaderBackButton from \"src/ui/button/HeaderBackButton\";\n\nconst AddAdmin = () => {\n  const { email } = useSelector((state) => state.auth) || {};\n  const navigate = useNavigate();\n  const location = useLocation().search;\n  const [role, setRole] = useState(\"manager\");\n\n  const { id } = useParams();\n  const [haveId, setHaveId] = useState(true);\n  const { data: admin, isLoading, isError } = useGetSingleAdminQuery(id, { skip: haveId });\n\n  const [\n    addManager,\n    { isLoading: addLoading, error: addErrorMsg, isError: addError, isSuccess: addSuccess },\n  ] = useAddManagerMutation();\n\n  const [\n    updateManager,\n    {\n      isLoading: updateLoading,\n      error: updateErrorMsg,\n      isError: updateError,\n      isSuccess: updateSuccess,\n    },\n  ] = useUpdateManagerMutation();\n  const [\n    changeAdminPassword,\n    {\n      isLoading: adminUpdateLoading,\n      error: adminUpdateErrorMsg,\n      isError: adminUpdateError,\n      isSuccess: adminUpdateSuccess,\n    },\n  ] = useChangeAdminPasswordMutation();\n\n  useMemo(() => {\n    if (id) {\n      setHaveId(false);\n    }\n  }, [id, setHaveId]);\n\n  const handleAddAdmin = (data) => {\n    const modifyData = {\n      ...data,\n      currentUserEmail: email,\n      role: role,\n    };\n\n    if (!id) {\n      addManager(modifyData);\n    } else {\n      if (location.includes(\"superAdmin\")) {\n        changeAdminPassword({ email, data: modifyData });\n      } else {\n        updateManager({ id, data: modifyData });\n      }\n    }\n  };\n\n  useEffect(() => {\n    toast.dismiss();\n\n    addError && toast.error(addErrorMsg?.data?.message || \"Added failed\", { id: \"aError\" });\n    updateError && toast.error(updateErrorMsg?.data?.message || \"Updated failed\", { id: \"aError\" });\n    adminUpdateError &&\n      toast.error(adminUpdateErrorMsg?.data?.message || \"Updated failed\", { id: \"adminError\" });\n  }, [addError, updateError, adminUpdateError]);\n\n  useEffect(() => {\n    toast.dismiss();\n    addSuccess && navigate(-1);\n    updateSuccess && navigate(-1);\n    adminUpdateSuccess && navigate(-1);\n  }, [addSuccess, updateSuccess, adminUpdateSuccess]);\n\n  return (\n    <>\n      <CRow>\n        <CCol xs={12}>\n          <CCard className=\"mb-4\">\n            <HeaderBackButton title={id ? \"Update admin\" : \"Add admin\"} />\n\n            <CCardBody>\n              <AddAdminForm\n                isLoading={updateLoading || addLoading || adminUpdateLoading}\n                data={admin}\n                setRole={setRole}\n                onSubmit={handleAddAdmin}\n              />\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n    </>\n  );\n};\n\nexport default AddAdmin;\n"],"names":["AddAdminForm","_ref","data","isLoading","onSubmit","setRole","register","handleSubmit","formState","errors","setValue","useForm","location","useLocation","search","isShowOldPassword","setIsShowOldPassword","useState","isShowNewPassword","setIsShowNewPassword","roleOptions","value","label","defaultValue","setDefaultValue","useEffect","defaultValueFromServer","role","selectedOption","find","option","_jsxs","CForm","children","CRow","className","CFormLabel","htmlFor","_jsx","CCol","xs","CFormInput","type","id","placeholder","name","required","disabled","email","CInputGroup","CInputGroupText","style","cursor","onClick","prevState","BsEye","BsEyeSlash","password","includes","Select","options","onChange","e","CancelButton","CButton","color","CIcon","icon","cilPlus","memo","AddAdmin","useSelector","state","auth","navigate","useNavigate","useParams","haveId","setHaveId","admin","isError","useGetSingleAdminQuery","skip","addManager","addLoading","error","addErrorMsg","addError","isSuccess","addSuccess","useAddManagerMutation","updateManager","updateLoading","updateErrorMsg","updateError","updateSuccess","useUpdateManagerMutation","changeAdminPassword","adminUpdateLoading","adminUpdateErrorMsg","adminUpdateError","adminUpdateSuccess","useChangeAdminPasswordMutation","useMemo","_addErrorMsg$data","_updateErrorMsg$data","_adminUpdateErrorMsg$","toast","dismiss","message","_Fragment","CCard","HeaderBackButton","title","CCardBody","modifyData","currentUserEmail"],"sourceRoot":""}