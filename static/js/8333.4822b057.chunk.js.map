{"version":3,"file":"static/js/8333.4822b057.chunk.js","mappings":"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","sources":["redux/manufacture/manufactureApi.js","views/manufacturer/manage-manufacturer/TableRowData.jsx","views/manufacturer/manage-manufacturer/ManageManufacturer.jsx"],"sourcesContent":["import { apiSlice } from \"../api/apiSlice\";\n\nexport const manufactureApi = apiSlice.injectEndpoints({\n  tagTypes: [\"Manufacture\", \"SingleManufacture\"],\n  endpoints: (builder) => ({\n    // get all manufacturer\n    getAllManufacture: builder.query({\n      query: () => ({\n        url: `/manufacturer`,\n        method: \"GET\",\n      }),\n      providesTags: [\"Manufacture\"],\n    }),\n\n    // get single manufacturer by id\n    getSingleManufacture: builder.query({\n      query: (id) => ({\n        url: `/manufacturer/${id}`,\n        method: \"GET\",\n      }),\n      invalidatesTags: [\"Manufacture\"],\n      providesTags: [\"SingleManufacture\"],\n    }),\n\n    // add new manufacturer\n    addManufacture: builder.mutation({\n      query: (data) => ({\n        url: `/manufacturer`,\n        method: \"POST\",\n        body: data,\n\n      }),\n      invalidatesTags: [\"Manufacture\"],\n    }),\n\n    // update manufacturer by id\n    updateManufacture: builder.mutation({\n      query: ({ id, data }) => ({\n        url: `/manufacturer/${id}`,\n        method: \"PUT\",\n        body: data,\n\n      }),\n      invalidatesTags: [\"Manufacture\", \"SingleManufacture\"],\n    }),\n\n    // delete manufacturer by id\n    deleteBrand: builder.mutation({\n      query: (id) => ({\n        url: `/manufacturer/${id}`,\n        method: \"DELETE\",\n        body: id,\n\n      }),\n      invalidatesTags: [\"Manufacture\"],\n    }),\n  }),\n});\n\nexport const {\n  useGetAllManufactureQuery,\n  useDeleteBrandMutation,\n  useAddManufactureMutation,\n  useUpdateManufactureMutation,\n  useGetSingleManufactureQuery,\n} = manufactureApi;\n","import { CTableDataCell, CTableHeaderCell, CTableRow } from \"@coreui/react\";\nimport { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport DeleteButton from \"src/ui/button/DeleteButton\";\nimport EditButton from \"src/ui/button/EditButton\";\nimport DeleteModal from \"src/ui/DeleteModal\";\n\nconst TableRowData = ({ index, manufacturer, handleDeleteManufacturer, deleteLoading }) => {\n  const [showModal, setShowModal] = useState(false);\n  return (\n    <>\n      <DeleteModal\n        deleteThis={handleDeleteManufacturer}\n        showModal={showModal}\n        setShowModal={setShowModal}\n        id={manufacturer?._id}\n        deleteLoading={deleteLoading}\n      />\n      <CTableRow>\n        <CTableHeaderCell scope=\"row\">\n          {index + 1}\n          {/* <Form.Check inline type=\"checkbox\" id={index + 1} /> */}\n        </CTableHeaderCell>\n        <CTableDataCell>{manufacturer?.name}</CTableDataCell>\n        <CTableDataCell>\n          <div className=\"\">\n            <Link to={`/manufacturer/edit/${manufacturer?._id}`}>\n              <EditButton />\n            </Link>\n            <DeleteButton setShowModal={setShowModal} />\n          </div>\n        </CTableDataCell>\n      </CTableRow>\n    </>\n  );\n};\n\nexport default TableRowData;\n","import {\n  CCard,\n  CCardBody,\n  CCol,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n} from \"@coreui/react\";\nimport { toast } from \"react-toastify\";\nimport {\n  useDeleteBrandMutation,\n  useGetAllManufactureQuery,\n} from \"src/redux/manufacture/manufactureApi\";\nimport CardHeaderButton from \"src/ui/CardHeaderButton\";\nimport TableRowData from \"./TableRowData\";\nimport { useEffect } from \"react\";\n\nconst ManageManufacturers = () => {\n  const {\n    data: manufacturers,\n    isLoading: getManufacturerLoading,\n    isError: manuFactureError,\n  } = useGetAllManufactureQuery();\n  const [\n    deleteBrand,\n    {\n      isSuccess: deleteSuccess, isError: deleteError, isLoading: deleteLoading\n    },\n  ] = useDeleteBrandMutation();\n\n  const handleDeleteManufacturer = (id) => {\n    deleteBrand(id);\n  };\n\n  let content = null;\n  if (getManufacturerLoading) {\n    content = <p>Loading..</p>;\n  }\n  if (!getManufacturerLoading && manuFactureError) {\n    content = <p className=\"text-danger\">There was an error</p>;\n  }\n  if (!getManufacturerLoading && !manuFactureError && manufacturers?.result?.length === 0) {\n    content = <p>There is no brand</p>;\n  }\n  if (!getManufacturerLoading && !manuFactureError && manufacturers?.result?.length > 0) {\n    content = manufacturers?.result?.map((manufacturer, index) => (\n      <TableRowData\n        key={manufacturer?._id}\n        index={index}\n        manufacturer={manufacturer}\n        handleDeleteManufacturer={handleDeleteManufacturer}\n        deleteLoading={deleteLoading}\n      />\n    ));\n  }\n\n  useEffect(() => {\n\n    deleteSuccess && toast.success(\"Delete successfully\", { id: \"dS\" });\n    deleteError && toast.error(\"Failed to delete\", { id: \"dF\" });\n\n  }, [deleteSuccess, deleteError])\n  return (\n    <>\n      <CRow>\n        <CCol xs={12}>\n          <CCard className=\"mb-4\">\n            <CardHeaderButton title={\"Brands\"} to={\"/manufacturer/add\"} />\n\n            <CCardBody>\n              <p className=\"text-medium-emphasis small\">Here is the list of all brands.</p>\n\n              <CTable align=\"middle\" className=\"mb-0 border\" bordered hover responsive>\n                <CTableHead color=\"light\">\n                  <CTableRow className=\"text-start\">\n                    <CTableHeaderCell scope=\"col\" style={{ width: \"60px\", minWidth: \"60px\" }}>\n                      Sl. No.\n                      {/* <Form.Check inline type=\"checkbox\" /> */}\n                    </CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Name</CTableHeaderCell>\n                    <CTableHeaderCell\n                      scope=\"col\"\n                      style={{\n                        width: \"100px\",\n                        minWidth: \"100px\",\n                      }}\n                    >\n                      Actions\n                    </CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>{content}</CTableBody>\n              </CTable>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n    </>\n  );\n};\n\nexport default ManageManufacturers;\n"],"names":["manufactureApi","apiSlice","injectEndpoints","tagTypes","endpoints","builder","getAllManufacture","query","url","method","providesTags","getSingleManufacture","id","concat","invalidatesTags","addManufacture","mutation","data","body","updateManufacture","_ref","deleteBrand","useGetAllManufactureQuery","useDeleteBrandMutation","useAddManufactureMutation","useUpdateManufactureMutation","useGetSingleManufactureQuery","index","manufacturer","handleDeleteManufacturer","deleteLoading","showModal","setShowModal","useState","_jsxs","_Fragment","children","_jsx","DeleteModal","deleteThis","_id","CTableRow","CTableHeaderCell","scope","CTableDataCell","name","className","Link","to","EditButton","DeleteButton","ManageManufacturers","_manufacturers$result","_manufacturers$result2","manufacturers","isLoading","getManufacturerLoading","isError","manuFactureError","isSuccess","deleteSuccess","deleteError","content","_manufacturers$result3","result","length","map","TableRowData","useEffect","toast","success","error","CRow","CCol","xs","CCard","CardHeaderButton","title","CCardBody","CTable","align","bordered","hover","responsive","CTableHead","color","style","width","minWidth","CTableBody"],"sourceRoot":""}