{"version":3,"file":"static/js/5596.cc81c6b1.chunk.js","mappings":"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","sources":["redux/admin/AdminApi.js","components/admins/AddAdminForm.jsx","views/admins/add-admin/AddAdmin.jsx"],"sourcesContent":["/* eslint-disable prettier/prettier */\nimport { apiSlice } from \"../api/apiSlice\";\n\nexport const adminApi = apiSlice.injectEndpoints({\n  tagTypes: [\"AllAdmin\", \"SingleAdmin\", \"AllManager\"],\n  endpoints: (builder) => ({\n    //GET ALL ADMIN\n    getAllAdmins: builder.query({\n      query: () => ({\n        url: `/admin/allAdmin`,\n        method: \"GET\",\n      }),\n      providesTags: [\"AllAdmin\"],\n    }),\n\n    // GET SINGLE ADMIN\n    getSingleAdmin: builder.query({\n      query: (id) => ({\n        url: `/admin/${id}`,\n        method: \"GET\",\n      }),\n      providesTags: [\"SingleAdmin\"],\n    }),\n\n    //TODO: CREATE ADMIN\n    createNewAdmin: builder.mutation({\n      query: (data) => ({\n        url: `/admin/register`,\n        method: \"POST\",\n        body: data,\n      }),\n      invalidatesTags: [\"SingleAdmin\"],\n    }),\n\n    // // ADMIN PASSWORD CHANGE\n    changeAdminPassword: builder.mutation({\n      query: ({ email, data }) => ({\n        url: `/admin/changeAdminPassword/${email}`,\n        method: \"PUT\",\n        body: data,\n      }),\n      invalidatesTags: [\"SingleAdmin\"],\n    }),\n\n    // AN  ADMIN DELETE\n    deleteAdmin: builder.mutation({\n      query: (id) => ({\n        url: `/admin/deleteAdmin/${id}`, // here id is a email address\n        method: \"DELETE\",\n      }),\n      invalidatesTags: [\"AllAdmin\"],\n    }),\n\n    // GET SINGLE ADMIN\n    getAllManager: builder.query({\n      query: () => ({\n        url: `/admin/manager/all`,\n        method: \"GET\",\n      }),\n      providesTags: [\"AllManager\"],\n    }),\n\n    // Add manager\n    addManager: builder.mutation({\n      query: (data) => ({\n        url: `/admin/manger`,\n        method: \"POST\",\n        body: data,\n      }),\n      invalidatesTags: [\"AllManager\"],\n    }),\n\n    // Update manager\n    updateManager: builder.mutation({\n      query: ({ id, data }) => ({\n        url: `/admin/updateAndPasswordChange/${id}`,\n        method: \"PUT\",\n        body: data,\n      }),\n      invalidatesTags: [\"AllManager\", \"SingleAdmin\"],\n    }),\n\n    // AN  ADMIN DELETE\n    deleteManager: builder.mutation({\n      query: ({ id, currentUserEmail }) => ({\n        url: `/admin/manager/${id}`,\n        method: \"DELETE\",\n        body: { currentUserEmail },\n      }),\n      invalidatesTags: [\"AllManager\"],\n    }),\n  }),\n});\n\nexport const {\n  useGetAllAdminsQuery,//\n  useGetSingleAdminQuery,//\n  useCreateNewAdminMutation,//\n  useDeleteAdminMutation,//\n  useGetAllManagerQuery,//\n  useAddManagerMutation,//\n  useDeleteManagerMutation,//\n  useUpdateManagerMutation,\n  useChangeAdminPasswordMutation,//\n} = adminApi;\n","import { cilPlus } from \"@coreui/icons\";\nimport CIcon from \"@coreui/icons-react\";\nimport {\n  CButton,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormLabel,\n  CFormSelect,\n  CInputGroup,\n  CInputGroupText,\n  CRow,\n} from \"@coreui/react\";\nimport PropTypes from \"prop-types\";\nimport { memo, useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { BsEye, BsEyeSlash } from \"react-icons/bs\";\nimport { useLocation } from \"react-router-dom\";\nimport CancelButton from \"src/ui/button/CancelButton\";\nimport Select from \"react-select\";\n\nconst AddAdminForm = ({ data, isLoading, onSubmit, setRole }) => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    setValue,\n  } = useForm();\n\n  const location = useLocation().search;\n\n  const [isShowOldPassword, setIsShowOldPassword] = useState(false);\n  const [isShowNewPassword, setIsShowNewPassword] = useState(false);\n\n  const roleOptions = [\n    { value: \"admin\", label: \"Admin\" },\n    { value: \"manager\", label: \"Manager\" },\n  ];\n\n  const [defaultValue, setDefaultValue] = useState(null);\n\n  useEffect(() => {\n    // Simulating fetching the default value from the server\n    const defaultValueFromServer = data?.role;\n    // Find the option object that matches the defaultValueFromServer\n    const selectedOption = roleOptions.find((option) => option.value === defaultValueFromServer);\n    setDefaultValue(selectedOption);\n  }, [data]);\n\n  return (\n    <CForm onSubmit={handleSubmit(onSubmit)}>\n      <CRow className=\"g-3\">\n        <CFormLabel htmlFor=\"oldPassword\">\n          Name {!data && <span className=\"text-danger\">*</span>}\n        </CFormLabel>\n\n        <CCol xs={12}>\n          <CFormInput\n            type=\"text\"\n            id=\"firstNameInputField\"\n            placeholder=\"Enter Name\"\n            defaultValue={data?.name}\n            aria-describedby=\"adminName\"\n            {...register(\"name\", { required: data ? false : true })}\n          />\n\n          {errors?.name && <div className=\"text-danger form-error\">Name is required</div>}\n        </CCol>\n        <CCol xs={12}>\n          <CFormLabel htmlFor=\"oldPassword\">\n            Email {!data && <span className=\"text-danger\">*</span>}\n          </CFormLabel>\n\n          <CFormInput\n            type=\"text\"\n            id=\"emailInputField\"\n            placeholder=\"Enter Email\"\n            disabled={data ? true : false}\n            defaultValue={data?.email}\n            aria-describedby=\"emailInputField\"\n            {...register(\"email\", { required: data ? false : true })}\n          />\n\n          {errors?.email && <div className=\"text-danger form-error\">Email is required </div>}\n        </CCol>\n\n        {data && (\n          <CCol xs={12}>\n            <CFormLabel htmlFor=\"Password\">Enter old password</CFormLabel>\n            <CInputGroup>\n              <CFormInput\n                type={isShowOldPassword ? \"text\" : \"password\"}\n                id=\"Password\"\n                placeholder=\"Enter old password\"\n                aria-describedby=\"Password\"\n                className=\"border-end-0\"\n                {...register(\"oldPassword\", { required: false })}\n              />\n              <CInputGroupText\n                className=\"border-start-0 bg-transparent\"\n                style={{ cursor: \"pointer\" }}\n                onClick={() => setIsShowOldPassword((prevState) => !prevState)}\n              >\n                {isShowOldPassword ? <BsEye /> : <BsEyeSlash />}\n              </CInputGroupText>\n            </CInputGroup>\n          </CCol>\n        )}\n\n        <CCol xs={12}>\n          <CFormLabel htmlFor=\"Password\">\n            {data ? \"Enter new password\" : \"Password\"}{\" \"}\n            {!data && <span className=\"text-danger\">*</span>}\n          </CFormLabel>\n          <CInputGroup>\n            <CFormInput\n              type={isShowNewPassword ? \"text\" : \"password\"}\n              id=\"Password\"\n              placeholder=\"Enter password\"\n              aria-describedby=\"Password\"\n              className=\"border-end-0\"\n              {...register(\"password\", {\n                required: data ? false : true,\n              })}\n            />\n            <CInputGroupText\n              className=\"border-start-0 bg-transparent\"\n              style={{ cursor: \"pointer\" }}\n              onClick={() => setIsShowNewPassword((prevState) => !prevState)}\n            >\n              {isShowNewPassword ? <BsEye /> : <BsEyeSlash />}\n            </CInputGroupText>\n          </CInputGroup>\n          {errors?.password && <div className=\"text-danger form-error\">Password is required</div>}\n        </CCol>\n      </CRow>\n\n      {!location.includes(\"superAdmin\") && defaultValue && (\n        <CCol xs={12}>\n          <label className=\"mb-2\">\n            Role <span className=\"text-danger\">*</span>\n          </label>\n          <Select\n            aria-label=\"Selection Field\"\n            defaultValue={defaultValue}\n            options={roleOptions}\n            onChange={(e) => setRole(e.value)}\n            name=\"role\"\n          />\n        </CCol>\n      )}\n      {!data && (\n        <CCol xs={12}>\n          <label className=\"mb-2\">\n            Role <span className=\"text-danger\">*</span>{\" \"}\n          </label>\n          <Select\n            aria-label=\"Selection Field\"\n            defaultValue={defaultValue}\n            options={roleOptions}\n            // {...register(\"role\", {\n            //   required: data ? false : true,\n            // })}\n            onChange={(e) => setRole(e.value)}\n            name=\"role\"\n          />\n        </CCol>\n      )}\n\n      <div className=\"text-end\">\n        <CancelButton />\n        <CButton type=\"submit\" color=\"primary\" className=\"mt-3\">\n          <CIcon icon={cilPlus} className=\"me-2\" />\n          {isLoading ? \"Loading..\" : \"Save\"}\n        </CButton>\n      </div>\n    </CForm>\n  );\n};\n\nexport default memo(AddAdminForm);\n\nAddAdminForm.propTypes = {\n  data: PropTypes.shape({\n    name: PropTypes.string,\n    description: PropTypes.string,\n  }),\n  onSubmit: PropTypes.func,\n};\n","import { CCard, CCardBody, CCardHeader, CCol, CRow } from \"@coreui/react\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport AddAdminForm from \"src/components/admins/AddAdminForm\";\nimport {\n  useAddManagerMutation,\n  useChangeAdminPasswordMutation,\n  useGetSingleAdminQuery,\n  useUpdateManagerMutation,\n} from \"src/redux/admin/AdminApi\";\nimport HeaderBackButton from \"src/ui/button/HeaderBackButton\";\n\nconst AddAdmin = () => {\n  const { email } = useSelector((state) => state.auth) || {};\n  const navigate = useNavigate();\n  const location = useLocation().search;\n  const [role, setRole] = useState(\"manager\");\n\n  const { id } = useParams();\n  const [haveId, setHaveId] = useState(true);\n  const { data: admin, isLoading, isError } = useGetSingleAdminQuery(id, { skip: haveId });\n\n  const [\n    addManager,\n    { isLoading: addLoading, error: addErrorMsg, isError: addError, isSuccess: addSuccess },\n  ] = useAddManagerMutation();\n\n  const [\n    updateManager,\n    {\n      isLoading: updateLoading,\n      error: updateErrorMsg,\n      isError: updateError,\n      isSuccess: updateSuccess,\n    },\n  ] = useUpdateManagerMutation();\n  const [\n    changeAdminPassword,\n    {\n      isLoading: adminUpdateLoading,\n      error: adminUpdateErrorMsg,\n      isError: adminUpdateError,\n      isSuccess: adminUpdateSuccess,\n    },\n  ] = useChangeAdminPasswordMutation();\n\n  useMemo(() => {\n    if (id) {\n      setHaveId(false);\n    }\n  }, [id, setHaveId]);\n\n  const handleAddAdmin = (data) => {\n    const modifyData = {\n      ...data,\n      currentUserEmail: email,\n      role: role,\n    };\n\n    if (!id) {\n      addManager(modifyData);\n    } else {\n      if (location.includes(\"superAdmin\")) {\n        changeAdminPassword({ email, data: modifyData });\n      } else {\n        updateManager({ id, data: modifyData });\n      }\n    }\n  };\n\n  useEffect(() => {\n    toast.dismiss();\n\n    addError && toast.error(addErrorMsg?.data?.message || \"Added failed\", { id: \"aError\" });\n    updateError && toast.error(updateErrorMsg?.data?.message || \"Updated failed\", { id: \"aError\" });\n    adminUpdateError &&\n      toast.error(adminUpdateErrorMsg?.data?.message || \"Updated failed\", { id: \"adminError\" });\n  }, [addError, updateError, adminUpdateError]);\n\n  useEffect(() => {\n    toast.dismiss();\n    addSuccess && navigate(-1);\n    updateSuccess && navigate(-1);\n    adminUpdateSuccess && navigate(-1);\n  }, [addSuccess, updateSuccess, adminUpdateSuccess]);\n\n  return (\n    <>\n      <CRow>\n        <CCol xs={12}>\n          <CCard className=\"mb-4\">\n            <HeaderBackButton title={id ? \"Update admin\" : \"Add admin\"} />\n\n            <CCardBody>\n              <AddAdminForm\n                isLoading={updateLoading || addLoading || adminUpdateLoading}\n                data={admin}\n                setRole={setRole}\n                onSubmit={handleAddAdmin}\n              />\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n    </>\n  );\n};\n\nexport default AddAdmin;\n"],"names":["adminApi","apiSlice","injectEndpoints","tagTypes","endpoints","builder","getAllAdmins","query","url","method","providesTags","getSingleAdmin","id","concat","createNewAdmin","mutation","data","body","invalidatesTags","changeAdminPassword","_ref","email","deleteAdmin","getAllManager","addManager","updateManager","_ref2","deleteManager","_ref3","currentUserEmail","useGetAllAdminsQuery","useGetSingleAdminQuery","useCreateNewAdminMutation","useDeleteAdminMutation","useGetAllManagerQuery","useAddManagerMutation","useDeleteManagerMutation","useUpdateManagerMutation","useChangeAdminPasswordMutation","AddAdminForm","isLoading","onSubmit","setRole","register","handleSubmit","formState","errors","setValue","useForm","location","useLocation","search","isShowOldPassword","setIsShowOldPassword","useState","isShowNewPassword","setIsShowNewPassword","roleOptions","value","label","defaultValue","setDefaultValue","useEffect","defaultValueFromServer","role","selectedOption","find","option","_jsxs","CForm","children","CRow","className","CFormLabel","htmlFor","_jsx","CCol","xs","CFormInput","type","placeholder","name","required","disabled","CInputGroup","CInputGroupText","style","cursor","onClick","prevState","BsEye","BsEyeSlash","password","includes","Select","options","onChange","e","CancelButton","CButton","color","CIcon","icon","cilPlus","memo","AddAdmin","useSelector","state","auth","navigate","useNavigate","useParams","haveId","setHaveId","admin","isError","skip","addLoading","error","addErrorMsg","addError","isSuccess","addSuccess","updateLoading","updateErrorMsg","updateError","updateSuccess","adminUpdateLoading","adminUpdateErrorMsg","adminUpdateError","adminUpdateSuccess","useMemo","_addErrorMsg$data","_updateErrorMsg$data","_adminUpdateErrorMsg$","toast","dismiss","message","_Fragment","CCard","HeaderBackButton","title","CCardBody","modifyData"],"sourceRoot":""}