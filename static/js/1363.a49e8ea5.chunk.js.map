{"version":3,"file":"static/js/1363.a49e8ea5.chunk.js","mappings":"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","sources":["redux/banner/bannerApi.js","ui/banner/BannerRowParent.jsx","ui/banner/ManageBannerParent.jsx","views/related-banner/manage-related-banner/ManageRelatedBanner.jsx"],"sourcesContent":["/* eslint-disable prettier/prettier */\nimport { apiSlice } from \"../api/apiSlice\";\n\nexport const bannerApi = apiSlice.injectEndpoints({\n  tagTypes: [\n    \"AllDesktopBanner\",\n    \"AllRelatedBanner\",\n    \"SingleRelatedBanner\",\n    \"AllTopBanner\",\n    \"SingleDesktopBanner\",\n    \"BottomBanner\",\n    \"SingleTopBanner\",\n    \"SingleBottomBanner\",\n  ],\n  endpoints: (builder) => ({\n    //get all  desktopBanner\n    getDesktopAllBanner: builder.query({\n      query: () => ({\n        url: `/desktopBanner`,\n        method: \"GET\",\n      }),\n      providesTags: [\"AllDesktopBanner\"],\n    }),\n\n    //get all  desktopBanner\n    getAllBannerName: builder.query({\n      query: () => ({\n        url: `/desktopBanner/allBannerName`,\n        method: \"GET\",\n      }),\n    }),\n\n    //get all  desktopBanner\n    getSingleDesktopBanner: builder.query({\n      query: (id) => ({\n        url: `/desktopBanner/${id}`,\n        method: \"GET\",\n      }),\n      providesTags: [\"SingleDesktopBanner\"],\n    }),\n    //delete desktop banner\n    deleteDesktopBanner: builder.mutation({\n      query: (id) => ({\n        url: `/desktopBanner/${id}`,\n        method: \"DELETE\",\n      }),\n      invalidatesTags: [\"AllDesktopBanner\"],\n    }),\n\n    //add  desktop banner\n    addDesktopBanner: builder.mutation({\n      query: (formData) => ({\n        url: `/desktopBanner`,\n        method: \"POST\",\n        body: formData,\n      }),\n      invalidatesTags: [\"AllDesktopBanner\"],\n    }),\n\n    //add  desktop banner\n    updateDesktopBanner: builder.mutation({\n      query: ({ formData, id }) => ({\n        url: `/desktopBanner/${id}`,\n        method: \"PUT\",\n        body: formData,\n      }),\n      invalidatesTags: [\"SingleDesktopBanner\", \"AllDesktopBanner\"],\n    }),\n\n    //:::::::::::::::::::::: Related banner ::::::::::::::::::::::::::\n\n    //get category by id\n    getRelatedAllBanner: builder.query({\n      query: () => ({\n        url: `/relatedBanner`,\n        method: \"GET\",\n      }),\n      providesTags: [\"AllRelatedBanner\"],\n    }),\n\n    //get single top banner\n    getRelatedBanner: builder.query({\n      query: (id) => ({\n        url: `/relatedBanner/${id}`,\n        method: \"GET\",\n      }),\n      providesTags: [\"SingleRelatedBanner\"],\n    }),\n\n    //delete desktop banner\n    deleteRelatedBanner: builder.mutation({\n      query: (id) => ({\n        url: `/relatedBanner/${id}`,\n        method: \"DELETE\",\n      }),\n      invalidatesTags: [\"AllRelatedBanner\"],\n    }),\n\n    //add  Related banner\n    addRelatedBanner: builder.mutation({\n      query: (formData) => ({\n        url: `/relatedBanner`,\n        method: \"POST\",\n        body: formData,\n      }),\n      invalidatesTags: [\"AllRelatedBanner\"],\n    }),\n\n    //update  related banner\n    updateRelatedBanner: builder.mutation({\n      query: ({ formData, id }) => ({\n        url: `/relatedBanner/${id}`,\n        method: \"PUT\",\n        body: formData,\n      }),\n      invalidatesTags: [\"SingleRelatedBanner\", \"AllRelatedBanner\"],\n    }),\n    //:::::::::::::::::::::: top banner ::::::::::::::::::::::::::\n\n    //get all top banner\n    getSideAllBanner: builder.query({\n      query: () => ({\n        url: `/sideBanner`,\n        method: \"GET\",\n      }),\n      providesTags: [\"AllTopBanner\"],\n    }),\n\n    //get single top banner\n    getSideBanner: builder.query({\n      query: (id) => ({\n        url: `/sideBanner/${id}`,\n        method: \"GET\",\n      }),\n      providesTags: [\"SingleTopBanner\"],\n    }),\n\n    //update  top banner\n    updateSideBanner: builder.mutation({\n      query: ({ formData, id }) => ({\n        url: `/sideBanner/${id}`,\n        method: \"PUT\",\n        body: formData,\n      }),\n      invalidatesTags: [\"SingleTopBanner\", \"AllTopBanner\"],\n    }),\n\n    //delete top banner\n    deleteSideBanner: builder.mutation({\n      query: (id) => ({\n        url: `/sideBanner/${id}`,\n        method: \"DELETE\",\n      }),\n      invalidatesTags: [\"AllTopBanner\"],\n    }),\n\n    //add  top banner\n    addSideBanner: builder.mutation({\n      query: (formData) => ({\n        url: `/sideBanner`,\n        method: \"POST\",\n        body: formData,\n      }),\n      invalidatesTags: [\"AllTopBanner\"],\n    }),\n\n    //:::::::::::::::::::::: bottom banner ::::::::::::::::::::::::::\n\n    //get all bottom banner\n    getBottomAllBanner: builder.query({\n      query: () => ({\n        url: `/bottomBanner`,\n        method: \"GET\",\n      }),\n      providesTags: [\"BottomBanner\"],\n    }),\n\n    //get single bottom banner\n    getSingleBottomBanner: builder.query({\n      query: (id) => ({\n        url: `/bottomBanner/${id}`,\n        method: \"GET\",\n      }),\n      providesTags: [\"SingleBottomBanner\"],\n    }),\n\n    //delete bottom banner\n    deleteBottomBanner: builder.mutation({\n      query: (id) => ({\n        url: `/bottomBanner/${id}`,\n        method: \"DELETE\",\n      }),\n      invalidatesTags: [\"BottomBanner\"],\n    }),\n\n    //add  bottom banner\n    addBottomBanner: builder.mutation({\n      query: (formData) => ({\n        url: `/bottomBanner`,\n        method: \"POST\",\n        body: formData,\n      }),\n      invalidatesTags: [\"BottomBanner\"],\n    }),\n\n    //update  bottom banner\n    updateBottomBanner: builder.mutation({\n      query: ({ formData, id }) => ({\n        url: `/bottomBanner/${id}`,\n        method: \"PUT\",\n        body: formData,\n      }),\n      invalidatesTags: [\"SingleBottomBanner\", \"BottomBanner\"],\n    }),\n  }),\n});\n\nexport const {\n  // Desktop Banner :::::::::::::::\n  useGetDesktopAllBannerQuery,\n  useGetSingleDesktopBannerQuery,\n  useDeleteDesktopBannerMutation,\n  useAddDesktopBannerMutation,\n  useUpdateDesktopBannerMutation,\n  useGetAllBannerNameQuery,\n\n  // Related banner ::::::::::::::::\n  useGetRelatedAllBannerQuery,\n  useGetRelatedBannerQuery,\n  useDeleteRelatedBannerMutation,\n  useUpdateRelatedBannerMutation,\n  useAddRelatedBannerMutation,\n\n  // top banner :::::::::::::::::\n  useDeleteSideBannerMutation,\n  useGetSideBannerQuery,\n  useGetSideAllBannerQuery,\n  useAddSideBannerMutation,\n  useUpdateSideBannerMutation,\n\n  // bottom banner :::::::::::::::\n  useGetBottomAllBannerQuery,\n  useGetSingleBottomBannerQuery,\n  useDeleteBottomBannerMutation,\n  useAddBottomBannerMutation,\n  useUpdateBottomBannerMutation,\n} = bannerApi;\n","import { CTableDataCell, CTableHeaderCell, CTableRow, to } from \"@coreui/react\";\nimport { useState } from \"react\";\nimport { Image } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport DeleteButton from \"../button/DeleteButton\";\nimport EditButton from \"../button/EditButton\";\nimport DeleteModal from \"../DeleteModal\";\n\nconst BannerRowParent = ({ data, index, deleteBannerHook, deleteLoading, to }) => {\n  const { image, _id, slug, name } = data || {};\n  const [showModal, setShowModal] = useState(false);\n  return (\n    <CTableRow>\n      <CTableHeaderCell scope=\"row\">{index + 1}</CTableHeaderCell>\n      <CTableHeaderCell scope=\"row\">{name}</CTableHeaderCell>\n      <CTableDataCell>\n        <Image\n          src={image}\n          alt=\"banner_image\"\n          height={200}\n          style={{ width: \"100%\", objectFit: \"contain\" }}\n        />\n      </CTableDataCell>\n      <CTableDataCell>\n        <div className=\"\">\n          <Link to={`/${to}/edit/${slug}`}>\n            <EditButton />\n          </Link>\n          <DeleteButton setShowModal={setShowModal} />\n        </div>\n      </CTableDataCell>\n      <DeleteModal\n        deleteThis={deleteBannerHook}\n        showModal={showModal}\n        setShowModal={setShowModal}\n        id={_id}\n        deleteLoading={deleteLoading}\n      />\n    </CTableRow>\n  );\n};\n\nexport default BannerRowParent;\n","import {\n  CCard,\n  CCardBody,\n  CCol,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n} from \"@coreui/react\";\nimport CardHeaderButton from \"../CardHeaderButton\";\n\nconst ManageBannerParent = ({ title, to, content }) => {\n  return (\n    <CRow>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CardHeaderButton title={title} to={to} />\n          <CCardBody>\n            <p className=\"text-medium-emphasis small\">Here is the list of all banners.</p>\n\n            <CTable align=\"middle\" className=\"mb-0 border\" bordered hover responsive>\n              <CTableHead color=\"light\">\n                <CTableRow className=\"text-start\">\n                  <CTableHeaderCell scope=\"col\" style={{ width: \"3.75rem\" }}>\n                    Sl. No.\n                  </CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Name</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Image</CTableHeaderCell>\n                  <CTableHeaderCell\n                    scope=\"col\"\n                    style={{\n                      width: \"100px\",\n                      minWidth: \"100px\",\n                    }}\n                  >\n                    Actions\n                  </CTableHeaderCell>\n                </CTableRow>\n              </CTableHead>\n              <CTableBody>{content}</CTableBody>\n            </CTable>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n};\n\nexport default ManageBannerParent;\n","import { useEffect } from \"react\";\nimport { toast } from \"react-toastify\";\nimport {\n  useDeleteRelatedBannerMutation,\n  useGetRelatedAllBannerQuery,\n} from \"src/redux/banner/bannerApi\";\nimport BannerRowParent from \"src/ui/banner/BannerRowParent\";\nimport ManageBannerParent from \"src/ui/banner/ManageBannerParent\";\nimport Error from \"src/ui/error/Error\";\n\nconst ManageDesktopBanner = () => {\n  // delete single banner with id\n  const [\n    deleteRelatedBanner,\n    { isLoading: deleteLoading, isError: deleteError, isSuccess: deleteSuccess },\n  ] = useDeleteRelatedBannerMutation();\n\n  // laod all get desktop banner hook\n  const {\n    data: bannerData,\n    isLoading: desktopBannerLoading,\n    isError: desktopBannerError,\n  } = useGetRelatedAllBannerQuery();\n\n  // checking loading/error/successfully get data\n  let content = null;\n  if (desktopBannerLoading) {\n    content = <p>Loading...</p>;\n  }\n  if (!desktopBannerLoading && desktopBannerError) {\n    content = <Error>There is something wrong</Error>;\n  }\n  if (!desktopBannerLoading && !desktopBannerError && bannerData?.data?.length === 0) {\n    content = <Error>There is no banner !!</Error>;\n  }\n  if (bannerData) {\n    content = bannerData?.data?.map((data, index) => (\n      <BannerRowParent\n        key={data?._id}\n        data={data}\n        index={index}\n        deleteBannerHook={deleteRelatedBanner}\n        deleteLoading={deleteLoading}\n        to={\"related-banner\"}\n      />\n    ));\n  }\n\n  // is success or error then show message\n  useEffect(() => {\n    deleteSuccess && toast.success(\"Delete banner successfully\");\n    deleteError && toast.error(\"Delete banner failed\");\n  }, [deleteSuccess, deleteError]);\n  return (\n    <div>\n      <ManageBannerParent title=\"All related banner\" to=\"/related-banner/add\" content={content} />\n    </div>\n  );\n};\n\nexport default ManageDesktopBanner;\n"],"names":["bannerApi","apiSlice","injectEndpoints","tagTypes","endpoints","builder","getDesktopAllBanner","query","url","method","providesTags","getAllBannerName","getSingleDesktopBanner","id","concat","deleteDesktopBanner","mutation","invalidatesTags","addDesktopBanner","formData","body","updateDesktopBanner","_ref","getRelatedAllBanner","getRelatedBanner","deleteRelatedBanner","addRelatedBanner","updateRelatedBanner","_ref2","getSideAllBanner","getSideBanner","updateSideBanner","_ref3","deleteSideBanner","addSideBanner","getBottomAllBanner","getSingleBottomBanner","deleteBottomBanner","addBottomBanner","updateBottomBanner","_ref4","useGetDesktopAllBannerQuery","useGetSingleDesktopBannerQuery","useDeleteDesktopBannerMutation","useAddDesktopBannerMutation","useUpdateDesktopBannerMutation","useGetAllBannerNameQuery","useGetRelatedAllBannerQuery","useGetRelatedBannerQuery","useDeleteRelatedBannerMutation","useUpdateRelatedBannerMutation","useAddRelatedBannerMutation","useDeleteSideBannerMutation","useGetSideBannerQuery","useGetSideAllBannerQuery","useAddSideBannerMutation","useUpdateSideBannerMutation","useGetBottomAllBannerQuery","useGetSingleBottomBannerQuery","useDeleteBottomBannerMutation","useAddBottomBannerMutation","useUpdateBottomBannerMutation","data","index","deleteBannerHook","deleteLoading","to","image","_id","slug","name","showModal","setShowModal","useState","_jsxs","CTableRow","children","_jsx","CTableHeaderCell","scope","CTableDataCell","Image","src","alt","height","style","width","objectFit","className","Link","EditButton","DeleteButton","DeleteModal","deleteThis","title","content","CRow","CCol","xs","CCard","CardHeaderButton","CCardBody","CTable","align","bordered","hover","responsive","CTableHead","color","minWidth","CTableBody","ManageDesktopBanner","_bannerData$data","isLoading","isError","deleteError","isSuccess","deleteSuccess","bannerData","desktopBannerLoading","desktopBannerError","_bannerData$data2","Error","length","map","BannerRowParent","useEffect","toast","success","error","ManageBannerParent"],"sourceRoot":""}