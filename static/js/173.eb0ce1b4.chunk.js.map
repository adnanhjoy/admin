{"version":3,"file":"static/js/173.eb0ce1b4.chunk.js","mappings":"0JAGO,MAAMA,E,SAAiBC,SAASC,gBAAgB,CACnDC,SAAU,CAAC,iBAAkB,qBAE7BC,UAAYC,IAAO,CAEfC,kBAAmBD,EAAQE,MAAM,CAC7BA,MAAOA,KAAA,CACHC,IAAI,gBACJC,OAAQ,QAEZC,aAAc,CAAC,oBAInBC,eAAgBN,EAAQO,SAAS,CAC7BL,MAAOM,IAAA,IAAC,KAAEC,GAAMD,EAAA,MAAM,CAClBL,IAAI,gBACJC,OAAQ,OACRM,KAAMD,EACT,EACDE,gBAAiB,CAAC,iBAAkB,uBAIxCC,qBAAsBZ,EAAQE,MAAM,CAChCA,MAAQW,IAAE,CACNV,IAAI,iBAADW,OAAmBD,GACtBT,OAAQ,QAEZC,aAAc,CAAC,uBAInBU,wBAAyBf,EAAQO,SAAS,CACtCL,MAAOc,IAAA,IAAC,GAAEH,EAAE,KAAEJ,GAAMO,EAAA,MAAM,CACtBb,IAAI,iBAADW,OAAmBD,GACtBT,OAAQ,MACRM,KAAMD,EACT,EACDE,gBAAiB,CAAC,iBAAkB,uBAIxCM,wBAAyBjB,EAAQO,SAAS,CACtCL,MAAQW,IAAE,CACNV,IAAI,iBAADW,OAAmBD,GACtBT,OAAQ,WAEZO,gBAAiB,CAAC,iBAAkB,4BAKnC,0BACTO,EAAyB,0BACzBC,EAAyB,6BACzBC,EAA4B,mCAC5BC,EAAkC,mCAClCC,GACA3B,C,iFC5DG,MAAM4B,E,SAAiB3B,SAASC,gBAAgB,CACrDC,SAAU,CAAC,cAAe,qBAC1BC,UAAYC,IAAO,CAEjBwB,kBAAmBxB,EAAQE,MAAM,CAC/BA,MAAOA,KAAA,CACLC,IAAI,eACJC,OAAQ,QAEVC,aAAc,CAAC,iBAGjBoB,qBAAsBzB,EAAQE,MAAM,CAClCA,MAAQwB,IAAW,CACjBvB,IAAI,uBAADW,OAAyBY,GAC5BtB,OAAQ,QAEVC,aAAc,CAAC,iBAIjBsB,qBAAsB3B,EAAQE,MAAM,CAClCA,MAAQW,IAAE,CACRV,IAAI,gBAADW,OAAkBD,GACrBT,OAAQ,QAEVO,gBAAiB,CAAC,eAClBN,aAAc,CAAC,uBAIjBuB,eAAgB5B,EAAQO,SAAS,CAC/BL,MAAQO,IAAI,CACVN,IAAI,eACJC,OAAQ,OACRM,KAAMD,EACNoB,QAAS,CACPC,cAAeC,KAAKC,MAAMC,aAAaC,QAAQ,SAASC,eAG5DxB,gBAAiB,CAAC,iBAIpByB,kBAAmBpC,EAAQO,SAAS,CAClCL,MAAOM,IAAA,IAAC,GAAEK,EAAE,KAAEJ,GAAMD,EAAA,MAAM,CACxBL,IAAI,gBAADW,OAAkBD,GACrBT,OAAQ,MACRM,KAAMD,EACNoB,QAAS,CACPC,cAAeC,KAAKC,MAAMC,aAAaC,QAAQ,SAASC,aAE3D,EACDxB,gBAAiB,CAAC,cAAe,uBAInC0B,kBAAmBrC,EAAQO,SAAS,CAClCL,MAAQW,IAAE,CACRV,IAAI,gBAADW,OAAkBD,GACrBT,OAAQ,SACRM,KAAMG,EACNgB,QAAS,CACPC,cAAeC,KAAKC,MAAMC,aAAaC,QAAQ,SAASC,eAG5DxB,gBAAiB,CAAC,sBAKX,0BACX2B,EAAyB,6BACzBC,EAA4B,6BAC5BC,EAA4B,0BAC5BC,EAAyB,6BACzBC,EAA4B,6BAC5BC,GACEpB,C,iFC5EJ,MAgBA,EAhBqBf,IAAuB,IAAtB,aAAEoC,GAAcpC,EACpC,OACEqC,EAAAA,EAAAA,KAACC,EAAAA,GAAQ,CAACC,QAAQ,SAAQC,UACxBH,EAAAA,EAAAA,KAACI,EAAAA,GAAO,CACNC,MAAM,SACNC,QAAQ,UACRC,MAAO,CAAEC,OAAQ,OAAQC,MAAO,OAAQC,SAAU,YAClDC,UAAU,YACVC,QAASA,IAAMb,GAAa,GAAMI,UAElCH,EAAAA,EAAAA,KAACa,EAAAA,EAAK,CAACC,KAAMC,EAAAA,EAAUR,MAAO,CAAEG,SAAU,WAAYM,IAAK,MAAOC,KAAM,YAEjE,C,6KCLf,MAmCA,EAnCyBtD,IAAyB,IAAxB,QAAEuD,EAAO,MAAEC,GAAOxD,EACxC,MAAOyD,EAAWrB,IAAgBsB,EAAAA,EAAAA,WAAS,IACpCC,GAAmB,UAAEC,EAAS,UAAEC,EAAS,QAAEC,KAAahD,EAAAA,EAAAA,MAU/D,OALAiD,EAAAA,EAAAA,YAAU,KACNC,EAAAA,GAAMC,UACNH,GAAWE,EAAAA,GAAME,MAAM,gBAAiB,CAAE7D,GAAI,WAC9CwD,GAAaG,EAAAA,GAAMG,QAAQ,sBAAuB,CAAE9D,GAAI,YAAa,GACtE,CAACyD,EAASD,KAETO,EAAAA,EAAAA,MAACC,EAAAA,GAAS,CAAA7B,SAAA,EACNH,EAAAA,EAAAA,KAACiC,EAAAA,GAAgB,CAACC,MAAM,MAAK/B,SAAEgB,EAAQ,KACvCnB,EAAAA,EAAAA,KAACmC,EAAAA,GAAc,CAAAhC,SAAS,OAAPe,QAAO,IAAPA,OAAO,EAAPA,EAASkB,SAC1BpC,EAAAA,EAAAA,KAACmC,EAAAA,GAAc,CAAAhC,UACX4B,EAAAA,EAAAA,MAAA,OAAKpB,UAAU,GAAER,SAAA,EACbH,EAAAA,EAAAA,KAACqC,EAAAA,GAAI,CAACC,GAAE,sBAAArE,OAA+B,OAAPiD,QAAO,IAAPA,OAAO,EAAPA,EAASqB,KAAMpC,UAC3CH,EAAAA,EAAAA,KAACwC,EAAAA,EAAU,OAEfxC,EAAAA,EAAAA,KAACyC,EAAAA,EAAY,CAAC1C,aAAcA,UAGpCC,EAAAA,EAAAA,KAAC0C,EAAAA,EAAW,CACRC,WAtBqB3E,IAC7BsD,EAAkBtD,EAAG,EAsBboD,UAAWA,EACXrB,aAAcA,EACd/B,GAAIkD,EAAQqB,IACZK,cAAerB,MAEX,ECoCpB,EA7DoBsB,KAAO,IAADC,EAAAC,EACtB,MACInF,KAAMoF,EACNzB,UAAW0B,EACXxB,QAASyB,IACT7E,EAAAA,EAAAA,MAEJ,IAAI6B,EAAU,KAW4D,IAADiD,GAVrEF,IACA/C,GAAUF,EAAAA,EAAAA,KAAA,KAAGW,UAAU,8BAA6BR,SAAC,gBAEpD8C,GAAkBC,IACnBhD,GAAUF,EAAAA,EAAAA,KAAA,KAAGW,UAAU,cAAaR,SAAC,wBAEpC8C,GAAmBC,GAAgD,KAArB,OAAXF,QAAW,IAAXA,GAAmB,QAARF,EAAXE,EAAaI,cAAM,IAAAN,OAAR,EAAXA,EAAqBO,UACzDnD,GAAUF,EAAAA,EAAAA,KAAA,KAAAG,SAAG,2BAGZ8C,IAAmBC,IAA2B,OAAXF,QAAW,IAAXA,GAAmB,QAARD,EAAXC,EAAaI,cAAM,IAAAL,OAAR,EAAXA,EAAqBM,QAAS,KAClEnD,EAAqB,OAAX8C,QAAW,IAAXA,GAAmB,QAARG,EAAXH,EAAaI,cAAM,IAAAD,OAAR,EAAXA,EAAqBG,KAAI,CAACpC,EAASC,KACzCnB,EAAAA,EAAAA,KAACuD,EAAgB,CAAoBrC,QAASA,EAASC,MAAOA,GAAhC,OAAPD,QAAO,IAAPA,OAAO,EAAPA,EAASqB,QAGxC,OACIvC,EAAAA,EAAAA,KAAAwD,EAAAA,SAAA,CAAArD,UACIH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAAAtD,UACDH,EAAAA,EAAAA,KAAC0D,EAAAA,GAAI,CAACC,GAAI,GAAGxD,UACT4B,EAAAA,EAAAA,MAAC6B,EAAAA,GAAK,CAACjD,UAAU,OAAMR,SAAA,EACnBH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAgB,CAACzB,MAAO,kBAAmBE,GAAI,uBAChDP,EAAAA,EAAAA,MAAC+B,EAAAA,GAAS,CAAA3D,SAAA,EACNH,EAAAA,EAAAA,KAAA,KAAGW,UAAU,6BAA4BR,SAAC,2CAE1C4B,EAAAA,EAAAA,MAACgC,EAAAA,GAAM,CAACC,MAAM,SAASrD,UAAU,cAAcsD,UAAQ,EAACC,OAAK,EAACC,YAAU,EAAAhE,SAAA,EACpEH,EAAAA,EAAAA,KAACoE,EAAAA,GAAU,CAAC/D,MAAM,QAAOF,UACrB4B,EAAAA,EAAAA,MAACC,EAAAA,GAAS,CAACrB,UAAU,aAAYR,SAAA,EAC7BH,EAAAA,EAAAA,KAACiC,EAAAA,GAAgB,CAACC,MAAM,MAAM3B,MAAO,CAAEE,MAAO,QAASN,SAAC,aAIxDH,EAAAA,EAAAA,KAACiC,EAAAA,GAAgB,CAACC,MAAM,MAAK/B,SAAC,kBAC9BH,EAAAA,EAAAA,KAACiC,EAAAA,GAAgB,CACbC,MAAM,MACN3B,MAAO,CACHE,MAAO,QACP4D,SAAU,SACZlE,SACL,kBAKTH,EAAAA,EAAAA,KAACsE,EAAAA,GAAU,CAAAnE,SAAED,kBAMlC,C,kJC5DX,MAoCA,EApC4BvC,IAA6B,IAAD4G,EAAA,IAA3B,YAAEC,EAAW,MAAErD,GAAOxD,EACjD,MAAOyD,EAAWrB,IAAgBsB,EAAAA,EAAAA,WAAS,IACpC7B,GAAmB,UAAE+B,EAAS,UAAEC,EAAS,QAAEC,KAAa9B,EAAAA,EAAAA,MAU/D,OALA+B,EAAAA,EAAAA,YAAU,KACRC,EAAAA,GAAMC,UACNH,GAAWE,EAAAA,GAAME,MAAM,gBAAiB,CAAE7D,GAAI,WAC9CwD,GAAaG,EAAAA,GAAMG,QAAQ,sBAAuB,CAAE9D,GAAI,YAAa,GACpE,CAACyD,EAASD,KAEXO,EAAAA,EAAAA,MAACC,EAAAA,GAAS,CAAA7B,SAAA,EACRH,EAAAA,EAAAA,KAACiC,EAAAA,GAAgB,CAACC,MAAM,MAAK/B,SAAEgB,EAAQ,KACvCnB,EAAAA,EAAAA,KAACmC,EAAAA,GAAc,CAAAhC,SAAa,OAAXqE,QAAW,IAAXA,OAAW,EAAXA,EAAapC,SAC9BpC,EAAAA,EAAAA,KAACmC,EAAAA,GAAc,CAAAhC,SAAa,OAAXqE,QAAW,IAAXA,GAAmB,QAARD,EAAXC,EAAaC,cAAM,IAAAF,OAAR,EAAXA,EAAqBnC,SACtCpC,EAAAA,EAAAA,KAACmC,EAAAA,GAAc,CAAAhC,UACb4B,EAAAA,EAAAA,MAAA,OAAKpB,UAAU,GAAER,SAAA,EACfH,EAAAA,EAAAA,KAACqC,EAAAA,GAAI,CAACC,GAAE,qBAAArE,OAAkC,OAAXuG,QAAW,IAAXA,OAAW,EAAXA,EAAajC,KAAMpC,UAChDH,EAAAA,EAAAA,KAACwC,EAAAA,EAAU,OAEbxC,EAAAA,EAAAA,KAACyC,EAAAA,EAAY,CAAC1C,aAAcA,UAGhCC,EAAAA,EAAAA,KAAC0C,EAAAA,EAAW,CACVC,WAvB2B3E,IAC/BwB,EAAkBxB,EAAG,EAuBjBoD,UAAWA,EACXrB,aAAcA,EACd/B,GAAIwG,EAAYjC,IAChBK,cAAerB,MAEP,C","sources":["redux/productType/productTypeApi.js","redux/subCategory/subCategoryApi.js","ui/button/DeleteButton.jsx","views/products/product-type/ProductTypeTable.jsx","views/products/product-type/ProductType.jsx","views/subcategories/manage-subcategories/SubcategoryTableRow.jsx"],"sourcesContent":["/* eslint-disable prettier/prettier */\nimport { apiSlice } from \"../api/apiSlice\";\n\nexport const productTypeApi = apiSlice.injectEndpoints({\n    tagTypes: [\"AllProductType\", \"SingleProductType\"],\n\n    endpoints: (builder) => ({\n        //get all product type\n        getAllproductType: builder.query({\n            query: () => ({\n                url: `/product-type`,\n                method: \"GET\",\n            }),\n            providesTags: [\"AllProductType\"],\n        }),\n\n        // add product type \n        addProductType: builder.mutation({\n            query: ({ data }) => ({\n                url: `/product-type`,\n                method: \"POST\",\n                body: data,\n            }),\n            invalidatesTags: [\"AllProductType\", \"SingleProductType\"],\n        }),\n\n        //get single product type\n        getSingleProductType: builder.query({\n            query: (id) => ({\n                url: `/product-type/${id}`,\n                method: \"GET\",\n            }),\n            providesTags: [\"SingleProductType\"],\n        }),\n\n        //get single product type\n        updateSingleProductType: builder.mutation({\n            query: ({ id, data }) => ({\n                url: `/product-type/${id}`,\n                method: \"PUT\",\n                body: data,\n            }),\n            invalidatesTags: [\"AllProductType\", \"SingleProductType\"],\n        }),\n\n        //get single product type\n        deleteSingleProductType: builder.mutation({\n            query: (id) => ({\n                url: `/product-type/${id}`,\n                method: \"DELETE\",\n            }),\n            invalidatesTags: [\"AllProductType\", \"SingleProductType\"],\n        }),\n    }),\n});\n\nexport const {\n    useGetAllproductTypeQuery,\n    useAddProductTypeMutation,\n    useGetSingleProductTypeQuery,\n    useUpdateSingleProductTypeMutation,\n    useDeleteSingleProductTypeMutation,\n} = productTypeApi;\n","import { apiSlice } from \"../api/apiSlice\";\n\nexport const subCategoryApi = apiSlice.injectEndpoints({\n  tagTypes: [\"SubCategory\", \"SingleSubCategory\"],\n  endpoints: (builder) => ({\n    // get all subcategory\n    getAllSubCategory: builder.query({\n      query: () => ({\n        url: `/subcategory`,\n        method: \"GET\",\n      }),\n      providesTags: [\"SubCategory\"],\n    }),\n    // get all subcategory\n    getFilterSubCategory: builder.query({\n      query: (subCategory) => ({\n        url: `/subcategory/filter?${subCategory}`,\n        method: \"GET\",\n      }),\n      providesTags: [\"SubCategory\"],\n    }),\n\n    // get single subcategory by id\n    getSingleSubCategory: builder.query({\n      query: (id) => ({\n        url: `/subcategory/${id}`,\n        method: \"GET\",\n      }),\n      invalidatesTags: [\"SubCategory\"],\n      providesTags: [\"SingleSubCategory\"],\n    }),\n\n    // add new subcategory\n    addSubCategory: builder.mutation({\n      query: (data) => ({\n        url: `/subcategory`,\n        method: \"POST\",\n        body: data,\n        headers: {\n          Authorization: JSON.parse(localStorage.getItem(\"auth\")).accessToken,\n        },\n      }),\n      invalidatesTags: [\"SubCategory\"],\n    }),\n\n    // update subcategory by id\n    updateSubCategory: builder.mutation({\n      query: ({ id, data }) => ({\n        url: `/subcategory/${id}`,\n        method: \"PUT\",\n        body: data,\n        headers: {\n          Authorization: JSON.parse(localStorage.getItem(\"auth\")).accessToken,\n        },\n      }),\n      invalidatesTags: [\"SubCategory\", \"SingleSubCategory\"],\n    }),\n\n    // delete subcategory by id\n    deleteSubCategory: builder.mutation({\n      query: (id) => ({\n        url: `/subcategory/${id}`,\n        method: \"DELETE\",\n        body: id,\n        headers: {\n          Authorization: JSON.parse(localStorage.getItem(\"auth\")).accessToken,\n        },\n      }),\n      invalidatesTags: [\"SubCategory\"],\n    }),\n  }),\n});\n\nexport const {\n  useGetAllSubCategoryQuery,\n  useGetFilterSubCategoryQuery,\n  useDeleteSubCategoryMutation,\n  useAddSubCategoryMutation,\n  useUpdateSubCategoryMutation,\n  useGetSingleSubCategoryQuery,\n} = subCategoryApi;\n","import { cilTrash } from \"@coreui/icons\";\nimport CIcon from \"@coreui/icons-react\";\nimport { CButton, CTooltip } from \"@coreui/react\";\n\nconst DeleteButton = ({ setShowModal }) => {\n  return (\n    <CTooltip content=\"Delete\">\n      <CButton\n        color=\"danger\"\n        variant=\"outline\"\n        style={{ height: \"30px\", width: \"32px\", position: \"relative\" }}\n        className=\"ms-2 mb-1\"\n        onClick={() => setShowModal(true)}\n      >\n        <CIcon icon={cilTrash} style={{ position: \"absolute\", top: \"25%\", left: \"25%\" }} />\n      </CButton>\n    </CTooltip>\n  );\n};\n\nexport default DeleteButton;\n","/* eslint-disable react/prop-types */\n/* eslint-disable prettier/prettier */\nimport { CTableDataCell, CTableHeaderCell, CTableRow } from \"@coreui/react\";\nimport { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport { useDeleteSingleProductTypeMutation } from \"src/redux/productType/productTypeApi\";\nimport DeleteButton from \"src/ui/button/DeleteButton\";\nimport EditButton from \"src/ui/button/EditButton\";\nimport DeleteModal from \"src/ui/DeleteModal\";\n\nconst ProductTypeTable = ({ proType, index }) => {\n    const [showModal, setShowModal] = useState(false);\n    const [deleteProductType, { isLoading, isSuccess, isError }] = useDeleteSingleProductTypeMutation();\n    const handelProductTypeDelete = (id) => {\n        deleteProductType(id);\n    };\n\n    useEffect(() => {\n        toast.dismiss();\n        isError && toast.error(\"Delete failed\", { id: \"dError\" });\n        isSuccess && toast.success(\"Delete successfully\", { id: \"dSuccess\" });\n    }, [isError, isSuccess]);\n    return (\n        <CTableRow>\n            <CTableHeaderCell scope=\"row\">{index + 1}</CTableHeaderCell>\n            <CTableDataCell>{proType?.title}</CTableDataCell>\n            <CTableDataCell>\n                <div className=\"\">\n                    <Link to={`/product-type/edit/${proType?._id}`}>\n                        <EditButton />\n                    </Link>\n                    <DeleteButton setShowModal={setShowModal} />\n                </div>\n            </CTableDataCell>\n            <DeleteModal\n                deleteThis={handelProductTypeDelete}\n                showModal={showModal}\n                setShowModal={setShowModal}\n                id={proType._id}\n                deleteLoading={isLoading}\n            />\n        </CTableRow>\n    );\n};\n\nexport default ProductTypeTable;\n","/* eslint-disable prettier/prettier */\nimport {\n    CCard,\n    CCardBody,\n    CCol,\n    CRow,\n    CTable,\n    CTableBody,\n    CTableHead,\n    CTableHeaderCell,\n    CTableRow,\n} from \"@coreui/react\";\nimport { useGetAllproductTypeQuery } from \"src/redux/productType/productTypeApi\";\nimport CardHeaderButton from \"src/ui/CardHeaderButton\";\nimport SubcategoryTableRow from \"src/views/subcategories/manage-subcategories/SubcategoryTableRow\";\nimport ProductTypeTable from \"./ProductTypeTable\";\n\nconst ProductType = () => {\n    const {\n        data: productType,\n        isLoading: productLoading,\n        isError: productError,\n    } = useGetAllproductTypeQuery();\n\n    let content = null;\n    if (productLoading) {\n        content = <p className=\"px-2 my-2 fs-5 text-primary\">Loading..</p>;\n    }\n    if (!productLoading && productError) {\n        content = <p className=\"text-danger\">There was an error</p>;\n    }\n    if (!productLoading && !productError && productType?.result?.length === 0) {\n        content = <p>There is no category</p>;\n    }\n    //\n    if (!productLoading && !productError && productType?.result?.length > 0) {\n        content = productType?.result?.map((proType, index) => (\n            <ProductTypeTable key={proType?._id} proType={proType} index={index} />\n        ));\n    }\n    return (\n        <>\n            <CRow>\n                <CCol xs={12}>\n                    <CCard className=\"mb-4\">\n                        <CardHeaderButton title={\"All ProductType\"} to={\"/product-type/add\"} />\n                        <CCardBody>\n                            <p className=\"text-medium-emphasis small\">Here is the list of all Product type.</p>\n\n                            <CTable align=\"middle\" className=\"mb-0 border\" bordered hover responsive>\n                                <CTableHead color=\"light\">\n                                    <CTableRow className=\"text-start\">\n                                        <CTableHeaderCell scope=\"col\" style={{ width: \"60px\" }}>\n                                            Sl. No.\n                                            {/* <Form.Check inline type=\"checkbox\" /> */}\n                                        </CTableHeaderCell>\n                                        <CTableHeaderCell scope=\"col\">Product Type</CTableHeaderCell>\n                                        <CTableHeaderCell\n                                            scope=\"col\"\n                                            style={{\n                                                width: \"100px\",\n                                                minWidth: \"100px\",\n                                            }}\n                                        >\n                                            Actions\n                                        </CTableHeaderCell>\n                                    </CTableRow>\n                                </CTableHead>\n                                <CTableBody>{content}</CTableBody>\n                            </CTable>\n                        </CCardBody>\n                    </CCard>\n                </CCol>\n            </CRow>\n        </>\n    );\n};\n\nexport default ProductType;\n","/* eslint-disable react/prop-types */\n/* eslint-disable prettier/prettier */\nimport { cilPencil, cilPlus, cilTrash } from \"@coreui/icons\";\nimport CIcon from \"@coreui/icons-react\";\nimport { CButton, CTableDataCell, CTableHeaderCell, CTableRow } from \"@coreui/react\";\nimport { useEffect, useState } from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport { useDeleteSubCategoryMutation } from \"src/redux/subCategory/subCategoryApi\";\nimport DeleteButton from \"src/ui/button/DeleteButton\";\nimport EditButton from \"src/ui/button/EditButton\";\nimport DeleteModal from \"src/ui/DeleteModal\";\n\nconst SubcategoryTableRow = ({ subcategory, index }) => {\n  const [showModal, setShowModal] = useState(false);\n  const [deleteSubCategory, { isLoading, isSuccess, isError }] = useDeleteSubCategoryMutation();\n  const handleDeleteSubcategory = (id) => {\n    deleteSubCategory(id);\n  };\n\n  useEffect(() => {\n    toast.dismiss();\n    isError && toast.error(\"Delete failed\", { id: \"dError\" });\n    isSuccess && toast.success(\"Delete successfully\", { id: \"dSuccess\" });\n  }, [isError, isSuccess]);\n  return (\n    <CTableRow>\n      <CTableHeaderCell scope=\"row\">{index + 1}</CTableHeaderCell>\n      <CTableDataCell>{subcategory?.title}</CTableDataCell>\n      <CTableDataCell>{subcategory?.parent?.title}</CTableDataCell>\n      <CTableDataCell>\n        <div className=\"\">\n          <Link to={`/subcategory/edit/${subcategory?._id}`}>\n            <EditButton />\n          </Link>\n          <DeleteButton setShowModal={setShowModal} />\n        </div>\n      </CTableDataCell>\n      <DeleteModal\n        deleteThis={handleDeleteSubcategory}\n        showModal={showModal}\n        setShowModal={setShowModal}\n        id={subcategory._id}\n        deleteLoading={isLoading}\n      />\n    </CTableRow>\n  );\n};\n\nexport default SubcategoryTableRow;\n"],"names":["productTypeApi","apiSlice","injectEndpoints","tagTypes","endpoints","builder","getAllproductType","query","url","method","providesTags","addProductType","mutation","_ref","data","body","invalidatesTags","getSingleProductType","id","concat","updateSingleProductType","_ref2","deleteSingleProductType","useGetAllproductTypeQuery","useAddProductTypeMutation","useGetSingleProductTypeQuery","useUpdateSingleProductTypeMutation","useDeleteSingleProductTypeMutation","subCategoryApi","getAllSubCategory","getFilterSubCategory","subCategory","getSingleSubCategory","addSubCategory","headers","Authorization","JSON","parse","localStorage","getItem","accessToken","updateSubCategory","deleteSubCategory","useGetAllSubCategoryQuery","useGetFilterSubCategoryQuery","useDeleteSubCategoryMutation","useAddSubCategoryMutation","useUpdateSubCategoryMutation","useGetSingleSubCategoryQuery","setShowModal","_jsx","CTooltip","content","children","CButton","color","variant","style","height","width","position","className","onClick","CIcon","icon","cilTrash","top","left","proType","index","showModal","useState","deleteProductType","isLoading","isSuccess","isError","useEffect","toast","dismiss","error","success","_jsxs","CTableRow","CTableHeaderCell","scope","CTableDataCell","title","Link","to","_id","EditButton","DeleteButton","DeleteModal","deleteThis","deleteLoading","ProductType","_productType$result","_productType$result2","productType","productLoading","productError","_productType$result3","result","length","map","ProductTypeTable","_Fragment","CRow","CCol","xs","CCard","CardHeaderButton","CCardBody","CTable","align","bordered","hover","responsive","CTableHead","minWidth","CTableBody","_subcategory$parent","subcategory","parent"],"sourceRoot":""}