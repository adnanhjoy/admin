{"version":3,"file":"static/js/2596.bf232810.chunk.js","mappings":"mNAYA,MAgFA,EAhFyBA,KAEvB,MAAM,GAAEC,IAAOC,EAAAA,EAAAA,OACRC,EAAgBC,IAAqBC,EAAAA,EAAAA,UAAS,MAC/CC,GAAWC,EAAAA,EAAAA,OACVC,EAAWC,IAAgBJ,EAAAA,EAAAA,UAAS,KAGpCK,GAAkB,UAAEC,EAAS,QAAEC,EAAO,UAAEC,KAAeC,EAAAA,EAAAA,OAE5DC,KAAMC,EACNL,UAAWM,EACXL,QAASM,IACPC,EAAAA,EAAAA,IAAyBlB,IAE3BmB,GACET,UAAWU,EAAeT,QAASU,EAAaT,UAAWU,KAC3DC,EAAAA,EAAAA,MAyCJ,OAbAC,EAAAA,EAAAA,YAAU,KACRb,GAAWc,EAAAA,GAAMC,MAAM,uBACvBL,GAAeI,EAAAA,GAAMC,MAAM,wBAAwB,GAClD,CAACf,EAASU,KAEbG,EAAAA,EAAAA,YAAU,KACRZ,GAAaP,GAAU,GACvBiB,GAAiBjB,GAAU,EAAE,GAC5B,CAACO,EAAWU,KAEfE,EAAAA,EAAAA,YAAU,KAAO,IAADG,EACdnB,EAAuB,OAAVO,QAAU,IAAVA,GAAgB,QAANY,EAAVZ,EAAYD,YAAI,IAAAa,OAAN,EAAVA,EAAkBC,KAAK,GACnC,CAACb,KAEFc,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACIf,GAcAa,EAAAA,EAAAA,KAACG,EAAAA,EAAO,KAbRH,EAAAA,EAAAA,KAACI,EAAAA,EAAe,CACdC,SA1CwBpB,IAAU,IAADqB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACvC,MAAMC,EAAQ3B,EAAK2B,MAAM,GACnBC,EAAW,IAAIC,SACrBD,EAASE,OAAO,QAASH,GACN,QAAnBN,EAAIrB,EAAK+B,kBAAU,IAAAV,GAAfA,EAAiBW,OACnBJ,EAASE,OAAO,aAAcG,KAAKC,UAAyB,QAAhBZ,EAACtB,EAAK+B,kBAAU,IAAAT,OAAA,EAAfA,EAAiBU,QAC1C,QAAtBT,EAAIvB,EAAKmC,qBAAa,IAAAZ,GAAlBA,EAAoBS,OACtBJ,EAASE,OAAO,gBAAiBG,KAAKC,UAA4B,QAAnBV,EAACxB,EAAKmC,qBAAa,IAAAX,OAAA,EAAlBA,EAAoBQ,QAC1C,QAA5BP,EAAIzB,EAAKoC,2BAAmB,IAAAX,GAAxBA,EAA0BO,OAC5BJ,EAASE,OAAO,sBAAuBG,KAAKC,UAAkC,QAAzBR,EAAC1B,EAAKoC,2BAAmB,IAAAV,OAAA,EAAxBA,EAA0BM,QAE9EhC,EAAKqC,MAAMT,EAASE,OAAO,OAAQ9B,EAAKqC,MACxCjD,GAAgBwC,EAASE,OAAO,oBAAqB1C,GACrDY,EAAKsC,SAASV,EAASE,OAAO,UAAW9B,EAAKsC,SAC9CtC,EAAKuC,SAASX,EAASE,OAAO,UAAW9B,EAAKuC,SAC9C9C,GAAWmC,EAASE,OAAO,OAAQrC,GAGnCP,EACFmB,EAAoB,CAAEnB,GAAIA,EAAI0C,SAAUA,IAExCjC,EAAiBiC,EACnB,EAqBMY,WAAY5C,GAAaU,EACzBmC,MAAO,qBACPxC,WAAsB,OAAVA,QAAU,IAAVA,OAAU,EAAVA,EAAYD,KACxB0C,iBAAiB,EACjBtD,eAAgBA,EAChBC,kBAAmBA,EACnBsD,WAAY,aACZlD,UAAWA,EACXC,aAAcA,KAKjB,C","sources":["views/related-banner/add-related-banner/AddRelatedBanner.jsx"],"sourcesContent":["/* eslint-disable prettier/prettier */\nimport { useEffect, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport {\n  useAddRelatedBannerMutation,\n  useGetRelatedBannerQuery,\n  useUpdateRelatedBannerMutation,\n} from \"src/redux/banner/bannerApi\";\nimport AddBannerParent from \"src/ui/banner/AddBannerParentForm\";\nimport Loading from \"src/ui/Loading\";\n\nconst AddDesktopBanner = () => {\n  // add desktop banner hook\n  const { id } = useParams();\n  const [selectedOption, setSelectedOption] = useState(null);\n  const navigate = useNavigate();\n  const [slugValue, setSlugValue] = useState(\"\");\n\n\n  const [addRelatedBanner, { isLoading, isError, isSuccess }] = useAddRelatedBannerMutation();\n  const {\n    data: bannerData,\n    isLoading: getLoading,\n    isError: getError,\n  } = useGetRelatedBannerQuery(id);\n  const [\n    updateRelatedBanner,\n    { isLoading: updateLoading, isError: updateError, isSuccess: updateSuccess },\n  ] = useUpdateRelatedBannerMutation();\n\n  // hande add desktop banner\n  const handleAddDesktopBanner = (data) => {\n    const image = data.image[0];\n    const formData = new FormData();\n    formData.append(\"image\", image);\n    if (data.categories?.value)\n      formData.append(\"categories\", JSON.stringify(data.categories?.value));\n    if (data.subCategories?.value)\n      formData.append(\"subCategories\", JSON.stringify(data.subCategories?.value));\n    if (data.subCategoryChildren?.value)\n      formData.append(\"subCategoryChildren\", JSON.stringify(data.subCategoryChildren?.value));\n\n    if (data.name) formData.append(\"name\", data.name);\n    if (selectedOption) formData.append(\"relatedBannerName\", selectedOption);\n    if (data.product) formData.append(\"product\", data.product);\n    if (data.related) formData.append(\"related\", data.related);\n    if (slugValue) formData.append(\"slug\", slugValue);\n\n\n    if (id) {\n      updateRelatedBanner({ id: id, formData: formData });\n    } else {\n      addRelatedBanner(formData);\n    }\n  };\n\n  useEffect(() => {\n    isError && toast.error(\"Banner added failed\");\n    updateError && toast.error(\"Banner updated failed\");\n  }, [isError, updateError]);\n\n  useEffect(() => {\n    isSuccess && navigate(-1);\n    updateSuccess && navigate(-1);\n  }, [isSuccess, updateSuccess]);\n\n  useEffect(() => {\n    setSlugValue(bannerData?.data?.slug)\n  }, [bannerData]);\n  return (\n    <>\n      {!getLoading ? (\n        <AddBannerParent\n          onSubmit={handleAddDesktopBanner}\n          addLoading={isLoading || updateLoading}\n          title={\"Add related Banner\"}\n          bannerData={bannerData?.data}\n          isRelatedBanner={true}\n          selectedOption={selectedOption}\n          setSelectedOption={setSelectedOption}\n          bannerSize={\"1280 x 570\"}\n          slugValue={slugValue}\n          setSlugValue={setSlugValue}\n        />\n      ) : (\n        <Loading />\n      )}\n    </>\n  );\n};\n\nexport default AddDesktopBanner;\n"],"names":["AddDesktopBanner","id","useParams","selectedOption","setSelectedOption","useState","navigate","useNavigate","slugValue","setSlugValue","addRelatedBanner","isLoading","isError","isSuccess","useAddRelatedBannerMutation","data","bannerData","getLoading","getError","useGetRelatedBannerQuery","updateRelatedBanner","updateLoading","updateError","updateSuccess","useUpdateRelatedBannerMutation","useEffect","toast","error","_bannerData$data","slug","_jsx","_Fragment","children","Loading","AddBannerParent","onSubmit","_data$categories","_data$categories2","_data$subCategories","_data$subCategories2","_data$subCategoryChil","_data$subCategoryChil2","image","formData","FormData","append","categories","value","JSON","stringify","subCategories","subCategoryChildren","name","product","related","addLoading","title","isRelatedBanner","bannerSize"],"sourceRoot":""}