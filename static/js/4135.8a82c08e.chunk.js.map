{"version":3,"file":"static/js/4135.8a82c08e.chunk.js","mappings":"2JAGO,MAAMA,E,SAAmBC,SAASC,gBAAgB,CACvDC,SAAU,CAAC,mBAAoB,eAC/BC,UAAYC,IAAO,CAEjBC,oBAAqBD,EAAQE,MAAM,CACjCA,MAAOA,KAAA,CACLC,IAAI,iBACJC,OAAQ,QAEVC,aAAc,CAAC,sBAGjBC,eAAgBN,EAAQE,MAAM,CAC5BA,MAAQK,IAAE,CACRJ,IAAI,kBAADK,OAAoBD,GACvBH,OAAQ,QAEVC,aAAc,CAAC,iBAGjBI,YAAaT,EAAQU,SAAS,CAC5BR,MAAQS,IAAI,CACVR,IAAI,iBACJC,OAAQ,OACRQ,KAAMD,IAERE,gBAAiB,CAAC,sBAIpBC,kBAAmBd,EAAQU,SAAS,CAClCR,MAAOa,IAAA,IAAC,GAAER,EAAE,KAAES,GAAMD,EAAA,MAAM,CACxBZ,IAAI,kBAADK,OAAoBD,GACvBH,OAAQ,MACRQ,KAAMI,EACP,EACDH,gBAAiB,CAAC,mBAAoB,iBAIxCI,kBAAmBjB,EAAQU,SAAS,CAClCR,MAAQK,IAAE,CACRJ,IAAI,kBAADK,OAAoBD,GACvBH,OAAQ,WAEVS,gBAAiB,CAAC,2BAKX,4BACXK,EAA2B,uBAC3BC,EAAsB,uBACtBC,EAAsB,6BACtBC,EAA4B,6BAC5BC,GACE3B,C,iFCvDJ,MAgBA,EAhBqBoB,IAAuB,IAAtB,aAAEQ,GAAcR,EACpC,OACES,EAAAA,EAAAA,KAACC,EAAAA,GAAQ,CAACC,QAAQ,SAAQC,UACxBH,EAAAA,EAAAA,KAACI,EAAAA,GAAO,CACNC,MAAM,SACNC,QAAQ,UACRC,MAAO,CAAEC,OAAQ,OAAQC,MAAO,OAAQC,SAAU,YAClDC,UAAU,YACVC,QAASA,IAAMb,GAAa,GAAMI,UAElCH,EAAAA,EAAAA,KAACa,EAAAA,EAAK,CAACC,KAAMC,EAAAA,EAAUR,MAAO,CAAEG,SAAU,WAAYM,IAAK,MAAOC,KAAM,YAEjE,C,kKCJf,MA8CA,EA9C0B1B,IAAsB,IAArB,MAAE2B,EAAK,KAAE/B,GAAMI,EACxC,MAAO4B,EAAWpB,IAAgBqB,EAAAA,EAAAA,WAAS,IAEzC3B,GACE4B,UAAWC,EAAeC,QAASC,EAAaC,MAAOC,EAAQ,UAAEC,KACjE7B,EAAAA,EAAAA,MAaJ,OANA8B,EAAAA,EAAAA,YAAU,KACRC,EAAAA,GAAMC,UACNH,GAAaE,EAAAA,GAAME,QAAQ,sBAAuB,CAAEhD,GAAI,aACxDyC,GAAeK,EAAAA,GAAMJ,MAAM,gBAAiB,CAAE1C,GAAI,WAAY,GAC7D,CAAC4C,EAAWH,KAGbQ,EAAAA,EAAAA,MAACC,EAAAA,GAAS,CAAA9B,SAAA,EACRH,EAAAA,EAAAA,KAACkC,EAAAA,GAAgB,CAACC,MAAM,MAAKhC,SAAEe,EAAQ,KACvClB,EAAAA,EAAAA,KAACkC,EAAAA,GAAgB,CAACC,MAAM,MAAKhC,UAC3BH,EAAAA,EAAAA,KAAA,KAAAG,SAAI,IAAIiC,KAAS,OAAJjD,QAAI,IAAJA,OAAI,EAAJA,EAAMkD,WAAWC,oBAEhCtC,EAAAA,EAAAA,KAACuC,EAAAA,GAAc,CAAApC,UACZH,EAAAA,EAAAA,KAAA,OAAKwC,wBAAyB,CAAEC,OAAY,OAAJtD,QAAI,IAAJA,OAAI,EAAJA,EAAMuD,kBAEjD1C,EAAAA,EAAAA,KAACuC,EAAAA,GAAc,CAAApC,UACb6B,EAAAA,EAAAA,MAAA,OAAKrB,UAAU,GAAER,SAAA,EACfH,EAAAA,EAAAA,KAAC2C,EAAAA,GAAI,CAACC,GAAE,8BAAA5D,OAAoC,OAAJG,QAAI,IAAJA,OAAI,EAAJA,EAAM0D,KAAM1C,UAClDH,EAAAA,EAAAA,KAAC8C,EAAAA,EAAU,OAEb9C,EAAAA,EAAAA,KAAC+C,EAAAA,EAAY,CAAChD,aAAcA,UAGhCC,EAAAA,EAAAA,KAACgD,EAAAA,EAAW,CACVC,WA5BmBC,KACvBzD,EAAsB,OAAJN,QAAI,IAAJA,OAAI,EAAJA,EAAM0D,IAAI,EA4BxB1B,UAAWA,EACXpB,aAAcA,EACdhB,GAAII,EAAK0D,IACTvB,cAAeA,MAEP,ECWhB,EAnD4B6B,KAAO,IAADC,EAAAC,EAChC,MAAM,KAAE7D,EAAI,UAAE6B,EAAS,QAAEE,IAAY7B,EAAAA,EAAAA,MAErC,IAAIQ,EAAU,KAgBd,OAfImB,IACFnB,GAAUF,EAAAA,EAAAA,KAAA,KAAAG,SAAG,gBAEVkB,GAAaE,IAChBrB,GAAUF,EAAAA,EAAAA,KAAA,KAAAG,SAAG,+BAEVkB,GAAcE,GAAkC,KAAnB,OAAJ/B,QAAI,IAAJA,GAAU,QAAN4D,EAAJ5D,EAAMA,YAAI,IAAA4D,OAAN,EAAJA,EAAYE,UACxCpD,GAAUF,EAAAA,EAAAA,KAAA,KAAAG,SAAG,iCAEVkB,IAAcE,IAAe,OAAJ/B,QAAI,IAAJA,GAAU,QAAN6D,EAAJ7D,EAAMA,YAAI,IAAA6D,OAAN,EAAJA,EAAYC,QAAS,IACjDpD,EAAc,OAAJV,QAAI,IAAJA,OAAI,EAAJA,EAAMA,KAAK+D,KAAI,CAACC,EAAOtC,KAC/BlB,EAAAA,EAAAA,KAACyD,EAAiB,CAAkBtE,KAAMqE,EAAOtC,MAAOA,GAA3B,OAALsC,QAAK,IAALA,OAAK,EAALA,EAAOX,SAKjCb,EAAAA,EAAAA,MAAC0B,EAAAA,GAAK,CAAAvD,SAAA,EACJH,EAAAA,EAAAA,KAAC2D,EAAAA,EAAgB,CAACC,MAAO,qBAAsBhB,GAAG,+BAClD5C,EAAAA,EAAAA,KAAC6D,EAAAA,GAAS,CAAA1D,UACR6B,EAAAA,EAAAA,MAAC8B,EAAAA,GAAM,CAACC,MAAM,SAASpD,UAAU,cAAcqD,UAAQ,EAACC,OAAK,EAACC,YAAU,EAAA/D,SAAA,EACtEH,EAAAA,EAAAA,KAACmE,EAAAA,GAAU,CAAC9D,MAAM,QAAOF,UACvB6B,EAAAA,EAAAA,MAACC,EAAAA,GAAS,CAACtB,UAAU,aAAYR,SAAA,EAC/BH,EAAAA,EAAAA,KAACkC,EAAAA,GAAgB,CAACC,MAAM,MAAM5B,MAAO,CAAEE,MAAO,WAAYN,SAAC,aAG3DH,EAAAA,EAAAA,KAACkC,EAAAA,GAAgB,CAACC,MAAM,MAAM5B,MAAO,CAAEE,MAAO,SAAUN,SAAC,iBAGzDH,EAAAA,EAAAA,KAACkC,EAAAA,GAAgB,CAACC,MAAM,MAAKhC,SAAC,iBAC9BH,EAAAA,EAAAA,KAACkC,EAAAA,GAAgB,CACfC,MAAM,MACN5B,MAAO,CACLE,MAAO,QACP2D,SAAU,SACVjE,SACH,kBAKLH,EAAAA,EAAAA,KAACqE,EAAAA,GAAU,CAAAlE,SAAED,WAGX,C","sources":["redux/storeLocation/storeLocationApi.js","ui/button/DeleteButton.jsx","views/storeLocation/StoreTableRowData.jsx","views/storeLocation/ManageStoreLocation.jsx"],"sourcesContent":["/* eslint-disable prettier/prettier */\nimport { apiSlice } from \"../api/apiSlice\";\n\nexport const storeLocationApi = apiSlice.injectEndpoints({\n  tagTypes: [\"AllStoreLocation\", \"singleStore\"],\n  endpoints: (builder) => ({\n    // get termsCondition offer discount for new user\n    getAllStoreLocation: builder.query({\n      query: () => ({\n        url: `/storeLocation`,\n        method: \"GET\",\n      }),\n      providesTags: [\"AllStoreLocation\"],\n    }),\n    // get blog offer discount for new user\n    getSingleStore: builder.query({\n      query: (id) => ({\n        url: `/storeLocation/${id}`,\n        method: \"GET\",\n      }),\n      providesTags: [\"singleStore\"],\n    }),\n    // get blog offer discount for new user\n    addNewStore: builder.mutation({\n      query: (blog) => ({\n        url: `/storeLocation`,\n        method: \"POST\",\n        body: blog,\n      }),\n      invalidatesTags: [\"AllStoreLocation\"],\n    }),\n\n    // get blog offer discount for new user\n    updateSingleStore: builder.mutation({\n      query: ({ id, data }) => ({\n        url: `/storeLocation/${id}`,\n        method: \"PUT\",\n        body: data,\n      }),\n      invalidatesTags: [\"AllStoreLocation\", \"singleStore\"],\n    }),\n\n    // get blog offer discount for new user\n    deleteSingleStore: builder.mutation({\n      query: (id) => ({\n        url: `/storeLocation/${id}`,\n        method: \"DELETE\",\n      }),\n      invalidatesTags: [\"AllStoreLocation\"],\n    }),\n  }),\n});\n\nexport const {\n  useGetAllStoreLocationQuery,\n  useGetSingleStoreQuery,\n  useAddNewStoreMutation,\n  useUpdateSingleStoreMutation,\n  useDeleteSingleStoreMutation,\n} = storeLocationApi;\n","import { cilTrash } from \"@coreui/icons\";\nimport CIcon from \"@coreui/icons-react\";\nimport { CButton, CTooltip } from \"@coreui/react\";\n\nconst DeleteButton = ({ setShowModal }) => {\n  return (\n    <CTooltip content=\"Delete\">\n      <CButton\n        color=\"danger\"\n        variant=\"outline\"\n        style={{ height: \"30px\", width: \"32px\", position: \"relative\" }}\n        className=\"ms-2 mb-1\"\n        onClick={() => setShowModal(true)}\n      >\n        <CIcon icon={cilTrash} style={{ position: \"absolute\", top: \"25%\", left: \"25%\" }} />\n      </CButton>\n    </CTooltip>\n  );\n};\n\nexport default DeleteButton;\n","/* eslint-disable react/prop-types */\n/* eslint-disable prettier/prettier */\n\nimport { CTableDataCell, CTableHeaderCell, CTableRow } from \"@coreui/react\";\nimport { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport { useDeleteSingleStoreMutation } from \"src/redux/storeLocation/storeLocationApi\";\nimport DeleteButton from \"src/ui/button/DeleteButton\";\nimport EditButton from \"src/ui/button/EditButton\";\nimport DeleteModal from \"src/ui/DeleteModal\";\n\nconst StoreTableRowData = ({ index, blog }) => {\n  const [showModal, setShowModal] = useState(false);\n  const [\n    deleteSingleStore,\n    { isLoading: deleteLoading, isError: deleteError, error: errorMsg, isSuccess },\n  ] = useDeleteSingleStoreMutation();\n\n  // delete blog\n  const handleDeleteBlog = () => {\n    deleteSingleStore(blog?._id);\n  };\n\n  useEffect(() => {\n    toast.dismiss();\n    isSuccess && toast.success(\"Delete successfully\", { id: \"dSuccess\" });\n    deleteError && toast.error(\"Delete failed\", { id: \"dFailed\" });\n  }, [isSuccess, deleteError]);\n\n  return (\n    <CTableRow>\n      <CTableHeaderCell scope=\"row\">{index + 1}</CTableHeaderCell>\n      <CTableHeaderCell scope=\"row\">\n        <p>{new Date(blog?.createdAt).toDateString()}</p>\n      </CTableHeaderCell>\n      <CTableDataCell>\n        {<div dangerouslySetInnerHTML={{ __html: blog?.description }} />}\n      </CTableDataCell>\n      <CTableDataCell>\n        <div className=\"\">\n          <Link to={`/pages/store-location/edit/${blog?._id}`}>\n            <EditButton />\n          </Link>\n          <DeleteButton setShowModal={setShowModal} />\n        </div>\n      </CTableDataCell>\n      <DeleteModal\n        deleteThis={handleDeleteBlog}\n        showModal={showModal}\n        setShowModal={setShowModal}\n        id={blog._id}\n        deleteLoading={deleteLoading}\n      />\n    </CTableRow>\n  );\n};\n\nexport default StoreTableRowData;\n","/* eslint-disable prettier/prettier */\nimport {\n  CCard,\n  CCardBody,\n  CTable,\n  CTableBody,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n} from \"@coreui/react\";\nimport { useGetAllStoreLocationQuery } from \"src/redux/storeLocation/storeLocationApi\";\nimport CardHeaderButton from \"src/ui/CardHeaderButton\";\nimport StoreTableRowData from \"./StoreTableRowData\";\n\nconst ManageStoreLocation = () => {\n  const { data, isLoading, isError } = useGetAllStoreLocationQuery();\n\n  let content = null;\n  if (isLoading) {\n    content = <p>Loading..</p>;\n  }\n  if (!isLoading && isError) {\n    content = <p>There is something wrong!</p>;\n  }\n  if (!isLoading && !isError && data?.data?.length === 0) {\n    content = <p>There is no Store Location</p>;\n  }\n  if (!isLoading && !isError && data?.data?.length > 0) {\n    content = data?.data.map((store, index) => (\n      <StoreTableRowData key={store?._id} blog={store} index={index} />\n    ));\n  }\n\n  return (\n    <CCard>\n      <CardHeaderButton title={\"All Store Location\"} to=\"/pages/store-location/add\" />\n      <CCardBody>\n        <CTable align=\"middle\" className=\"mb-0 border\" bordered hover responsive>\n          <CTableHead color=\"light\">\n            <CTableRow className=\"text-start\">\n              <CTableHeaderCell scope=\"col\" style={{ width: \"3.75rem\" }}>\n                Sl. No.\n              </CTableHeaderCell>\n              <CTableHeaderCell scope=\"col\" style={{ width: \"10rem\" }}>\n                Added Dated\n              </CTableHeaderCell>\n              <CTableHeaderCell scope=\"col\">Description</CTableHeaderCell>\n              <CTableHeaderCell\n                scope=\"col\"\n                style={{\n                  width: \"100px\",\n                  minWidth: \"100px\",\n                }}\n              >\n                Actions\n              </CTableHeaderCell>\n            </CTableRow>\n          </CTableHead>\n          <CTableBody>{content}</CTableBody>\n        </CTable>\n      </CCardBody>\n    </CCard>\n  );\n};\n\nexport default ManageStoreLocation;\n"],"names":["storeLocationApi","apiSlice","injectEndpoints","tagTypes","endpoints","builder","getAllStoreLocation","query","url","method","providesTags","getSingleStore","id","concat","addNewStore","mutation","blog","body","invalidatesTags","updateSingleStore","_ref","data","deleteSingleStore","useGetAllStoreLocationQuery","useGetSingleStoreQuery","useAddNewStoreMutation","useUpdateSingleStoreMutation","useDeleteSingleStoreMutation","setShowModal","_jsx","CTooltip","content","children","CButton","color","variant","style","height","width","position","className","onClick","CIcon","icon","cilTrash","top","left","index","showModal","useState","isLoading","deleteLoading","isError","deleteError","error","errorMsg","isSuccess","useEffect","toast","dismiss","success","_jsxs","CTableRow","CTableHeaderCell","scope","Date","createdAt","toDateString","CTableDataCell","dangerouslySetInnerHTML","__html","description","Link","to","_id","EditButton","DeleteButton","DeleteModal","deleteThis","handleDeleteBlog","ManageStoreLocation","_data$data","_data$data2","length","map","store","StoreTableRowData","CCard","CardHeaderButton","title","CCardBody","CTable","align","bordered","hover","responsive","CTableHead","minWidth","CTableBody"],"sourceRoot":""}