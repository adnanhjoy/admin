{"version":3,"file":"static/js/5291.7be7fd7d.chunk.js","mappings":"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","sources":["redux/productType/productTypeApi.js","components/products/AddProductTypeForm.jsx","views/products/add-product-type/AddProductType.jsx"],"sourcesContent":["/* eslint-disable prettier/prettier */\nimport { apiSlice } from \"../api/apiSlice\";\n\nexport const productTypeApi = apiSlice.injectEndpoints({\n    tagTypes: [\"AllProductType\", \"SingleProductType\"],\n\n    endpoints: (builder) => ({\n        //get all product type\n        getAllproductType: builder.query({\n            query: () => ({\n                url: `/product-type`,\n                method: \"GET\",\n            }),\n            providesTags: [\"AllProductType\"],\n        }),\n\n        // add product type \n        addProductType: builder.mutation({\n            query: ({ data }) => ({\n                url: `/product-type`,\n                method: \"POST\",\n                body: data,\n            }),\n            invalidatesTags: [\"AllProductType\", \"SingleProductType\"],\n        }),\n\n        //get single product type\n        getSingleProductType: builder.query({\n            query: (id) => ({\n                url: `/product-type/${id}`,\n                method: \"GET\",\n            }),\n            providesTags: [\"SingleProductType\"],\n        }),\n\n        //get single product type\n        updateSingleProductType: builder.mutation({\n            query: ({ id, data }) => ({\n                url: `/product-type/${id}`,\n                method: \"PUT\",\n                body: data,\n            }),\n            invalidatesTags: [\"AllProductType\", \"SingleProductType\"],\n        }),\n\n        //get single product type\n        deleteSingleProductType: builder.mutation({\n            query: (id) => ({\n                url: `/product-type/${id}`,\n                method: \"DELETE\",\n            }),\n            invalidatesTags: [\"AllProductType\", \"SingleProductType\"],\n        }),\n    }),\n});\n\nexport const {\n    useGetAllproductTypeQuery,\n    useAddProductTypeMutation,\n    useGetSingleProductTypeQuery,\n    useUpdateSingleProductTypeMutation,\n    useDeleteSingleProductTypeMutation,\n} = productTypeApi;\n","import { cilPlus } from \"@coreui/icons\";\nimport CIcon from \"@coreui/icons-react\";\nimport { CButton, CCol, CForm, CFormInput, CRow } from \"@coreui/react\";\nimport PropTypes from \"prop-types\";\nimport { useForm } from \"react-hook-form\";\nimport CancelButton from \"src/ui/button/CancelButton\";\n\nconst AddProductTypeForm = (props) => {\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: { errors },\n    control,\n  } = useForm();\nconsole.log(props)\n  return (\n    <CForm onSubmit={handleSubmit(props.onSubmit)}>\n      <CRow className=\"g-3\">\n        <CCol xs={12}>\n          <CFormInput\n            type=\"text\"\n            id=\"manufacturerNameInputField\"\n            label=\"Product Type\"\n            placeholder=\"Enter Product type\"\n            defaultValue={props?.data?.title}\n            aria-describedby=\"manufacturerNameInputField\"\n            {...register(\"title\", { required: props?.data ? false : true })}\n          />\n        </CCol>\n      </CRow>\n      <div className=\"text-end\">\n        <CancelButton />\n        <CButton type=\"submit\" color=\"primary\" className=\"mt-3\">\n          <CIcon icon={cilPlus} className=\"me-2\" />\n          {props?.isLoading ? \"Loading..\" : \"Save\"}\n        </CButton>\n      </div>\n    </CForm>\n  );\n};\n\nexport default AddProductTypeForm;\n\nAddProductTypeForm.propTypes = {\n  data: PropTypes.shape({\n    name: PropTypes.string,\n    description: PropTypes.string,\n  }),\n  onSubmit: PropTypes.func,\n};\n","import { CCard, CCardBody, CCardHeader, CCol, CRow } from \"@coreui/react\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport AddProductTypeForm from \"src/components/products/AddProductTypeForm\";\nimport { useAddProductTypeMutation, useGetSingleProductTypeQuery, useUpdateSingleProductTypeMutation } from \"src/redux/productType/productTypeApi\";\n\nconst AddproductType = () => {\n    const { id } = useParams();\n    const [haveId, setHaveId] = useState(true);\n    const { data } = useGetSingleProductTypeQuery(id, { skip: haveId });\n    console.log(data)\n    const [\n        updateProductType,\n        { isLoading: updateLoading, isSuccess: updateSuccess, isError: updateError },\n    ] = useUpdateSingleProductTypeMutation();\n    const [addProductType, { isLoading: addLoading, isSuccess: addSuccess, isError: addError }] =\n        useAddProductTypeMutation();\n\n    useEffect(() => {\n        if (id) {\n            setHaveId(false);\n        }\n    }, [id]);\n\n    const handleProductType = (data) => {\n        if (id) {\n            updateProductType({ id, data });\n        } else {\n            addProductType({ data });\n        }\n\n    };\n\n    const navigate = useNavigate();\n    useEffect(() => {\n        addSuccess && navigate(-1);\n        updateSuccess && navigate(-1);\n    }, [updateSuccess, addSuccess]);\n\n    useEffect(() => {\n        toast.dismiss();\n        if (addError) {\n            toast.error(\"Product Type added failed\");\n        }\n        if (updateError) {\n            toast.error(\"Product Type updated\");\n        }\n    }, [addError, updateError]);\n\n    return (\n        <>\n            <CRow>\n                <CCol xs={12}>\n                    <CCard className=\"mb-4\">\n                        <CCardHeader>\n                            <strong>{id ? \"Edit\" : \"Add\"} Product Type</strong>\n                        </CCardHeader>\n                        <CCardBody>\n                            <AddProductTypeForm\n                                isLoading={updateLoading || addLoading}\n                                data={data?.result}\n                                onSubmit={handleProductType}\n                            />\n                        </CCardBody>\n                    </CCard>\n                </CCol>\n            </CRow>\n        </>\n    );\n};\n\nexport default AddproductType;\n"],"names":["productTypeApi","apiSlice","injectEndpoints","tagTypes","endpoints","builder","getAllproductType","query","url","method","providesTags","addProductType","mutation","_ref","data","body","invalidatesTags","getSingleProductType","id","concat","updateSingleProductType","_ref2","deleteSingleProductType","useGetAllproductTypeQuery","useAddProductTypeMutation","useGetSingleProductTypeQuery","useUpdateSingleProductTypeMutation","useDeleteSingleProductTypeMutation","props","_props$data","register","handleSubmit","watch","formState","errors","control","useForm","console","log","_jsxs","CForm","onSubmit","children","_jsx","CRow","className","CCol","xs","CFormInput","type","label","placeholder","defaultValue","title","required","CancelButton","CButton","color","CIcon","icon","cilPlus","isLoading","AddproductType","useParams","haveId","setHaveId","useState","skip","updateProductType","updateLoading","isSuccess","updateSuccess","isError","updateError","addLoading","addSuccess","addError","useEffect","navigate","useNavigate","toast","dismiss","error","_Fragment","CCard","CCardHeader","CCardBody","AddProductTypeForm","result"],"sourceRoot":""}